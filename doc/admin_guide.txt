leihs administration and installation guide
===========================================
Ramon Cahenzli <ramon.cahenzli@zhdk.ch>


== Introduction ==

leihs is web-based inventory handling and resource booking system. It allows users to view available equipment and place reservations through the frontend. Inventory managers and sysadmins use the backend to handle incoming reservations and manage items in the inventory.

This guide shows you how to install a leihs server. The guide is written from the perspective of a system administrator or developer. If you are interested in running leihs in your own organization but aren't a sysadmin, talk to your IT department. leihs is not intended to be installed on a client, so any software installation on your own machine isn't necessary. All you need is a web browser.

Consulting and installation services are also available from independent companies supporting Free Software all around the world. Ask around for a company or individual who knows Ruby on Rails applications, you will surely find someone who can help you install leihs.

If you are such a person yourself and would like to have your services listed on the leihs project website and in this document, please write me an e-mail.


== Quick Install ==

This section is meant for admins experienced with installing Ruby on Rails applications. It lists the necessary installation steps in the briefest possible way, so you can get up and running quickly.

=== Installation on Mac OS X ===

The following steps were tested on Mac OS X 10.5 on an x86. They may also work for later versions.


1. Install Apple Xcode. This is required because some modules may need a C/C++ compiler. XCode is http://developer.apple.com/Tools/[available from Apple] after a free developer registration.
2. Install MySQL 5.0. Use the 32-bit version if you are running OS X Leopard (10.5) but use the 64-bit version if you're on Snow Leopard (10.6). *Make absolutely sure to install the 32-bit version on Leopard (10.5) even if you are running a 64-bit operating system.* Some bugs in Mac OS X's MySQL and Ruby integration make it impossible to continue otherwise.
3. Update the local gem system:
+
 $ sudo gem update --system
+
4. Install the required version of Rails as well as a few gems that cannot be installed automatically:
+
 $ cd leihs-2.1
 $ sudo rake gems:install 

5. Install the native MySQL gem:
+
If you are installing on Snow Leopard (OS X 10.6) use the following installation options:
+
 $ sudo env ARCHFLAGS='-arch x86_64' \
gem install mysql -- --with-mysql-config=/usr/local/mysql/bin/mysql_config
+
If you are using Leopard (OS X 10.5) or below, use the following string instead:
+
 $ sudo gem install mysql -- --with-mysql-config=/usr/local/mysql/bin/mysql_config \
--with-mysql-dir=/usr/local/mysql --with-mysql-lib=/usr/local/mysql/lib
\ --with-mysql-include=/usr/local/mysql/include 


6. Try out if Rails works on your machine:
+
 $ cd /tmp
 $ rails test
 $ cd test
 $ ./script/server
+
You should see a web page at http://localhost:3000. If not, please make sure that Rails is installed properly before continuing.
+
If this works, stop the server again using Ctrl-C.

7. Download the latest version of leihs from our http://sourceforge.net/projects/leihs[SourceForge project page]. Unpack it to a convenient directory. We use the home directory of the 'leihs' user (/Users/leihs) to install leihs in. Of course you can use any directory.

8. Configure database access for this installation of leihs. Copy the file config/database.yml.example to config/database.yml and set things up according to your needs. You will need a MySQL database for leihs. Here is an example of a development-mode database configuration:
+
 development:
    adapter: mysql
    database: leihs2_development
    encoding: utf8
    username: root
    password:
    host: localhost
    port: 3306

9. Create and migrate the database:
+
 $ rake db:migrate

10. Start the server:
+
 $ ./script/server

Now you should see your local leihs server at http://localhost:3000. You can log in with username "super_user_1" and password "pass".
 

=== Installation on Debian GNU/Linux ===

These instructions were tested on a minimal install of Debian GNU/Linux 5.0 (Lenny).

1. Install Ruby and irb
+
 # apt-get install ruby irb rdoc libopenssl-ruby ruby-dev

2. Install RubyGems from http://rubygems.org/[the RubyGems website]. Make sure *not to install* the edition of RubyGems that is available from Debian's package archives. RubyGem development moves so quickly that we need to use the one from upstream.
+
 # cd /tmp
 # wget http://rubyforge.org/frs/download.php/56227/rubygems-1.3.3.tgz 
 # tar xvfz rubygems-1.3.3.tgz
 # cd rubygems-1.3.3
 # ruby setup.rb
 # ln -s /usr/bin/gem1.8 /usr/bin/gem
+
Note that the URL above might change! Please visit the RubyGems site to find the exact URL under "Downloads".

3. Install the required version of Rails as well as a few gems that cannot be installed automatically:
+
 # cd leihs-2.1 
 # rake gems:install 

4. Install the MySQL header files and the MySQL gem:
+
 # apt-get install libmysqlclient15-dev make
 # gem install mysql

5. Try out if Rails works on your machine:
+
 $ cd /tmp
 $ rails test
 $ cd test
 $ ./script/server
+
You should see a web page at http://localhost:3000. If not, please make sure that Rails is installed properly before continuing.
+
If this works, stop the server again using Ctrl-C.

6. Download the latest version of leihs from our http://sourceforge.net/projects/leihs[SourceForge project page]. Unpack it to a convenient directory. We use the home directory of the 'leihs' user (/home/leihs) to install leihs in. Of course you can use any directory.

7. Configure database access for this installation of leihs. Copy the file config/database.yml.example to config/database.yml and set things up according to your needs. You will need a MySQL database for leihs. Here is an example of a development-mode database configuration:
+
 development:
    adapter: mysql
    database: leihs2_development
    encoding: utf8
    username: root
    password:
    host: localhost
    port: 3306

8. Create and migrate the database:
+
 # su - leihs
 $ rake db:migrate

9. Start the server:
+
 $ ./script/server

Now you should see your local leihs server at http://localhost:3000. You can log in with username "super_user_1" and password "pass".


== Upgrading from leihs 2.0.x to leihs 2.1 ==

We tried to make very sure that upgrading from earlier versions to leihs 2.1 is painless and safe. The largest differences are:

1. Database changes
1. New or changed options in config/environment.rb

The former are quite easily handled by a database migration:

 $ cd leihs-2.1
 $ rake db:migrate
 $ RAILS_ENV='production' rake db:migrate

Please substitute "production" for those environments you actually use.

The latter needs to be taken care of by hand. The default is presented here:

 FRONTEND_SPLASH_PAGE = false
 CONTRACT_LENDING_PARTY_STRING = "Your\nAddress\nHere"
 EMAIL_SIGNATURE = "Das PZ-leihs Team"
 LDAP_CONFIG = YAML::load_file(RAILS_ROOT+'/config/LDAP.yml')
 DEFAULT_EMAIL = 'sender@example.com'

The options are explained as follows:

*FRONTEND_SPLASH_PAGE* sets whether a splash information page (with static, welcoming information for the user) is shown after a frontend user logs in. Can be true or false.

*CONTRACT_LENDING_PARTY_STRING* is a string printed on every lending contract, in the top right, under the heading "lending party". Can be any valid Ruby string.

*EMAIL_SIGNATURE* is a string printed at the end of any reminder or notification e-mail message. Can be any valid Ruby string.

*LDAP_CONFIG* is a path pointing to the configuration file for your LDAP server.

*DEFAULT_EMAIL* is the e-mail address used for sending reminder/notification e-mails when that particular inventory pool has no e-mail set in its own settings. Can be any valid Ruby string, but perhaps you should make sure it's a valid e-mail address ;)

== Default admin username/password ==

After installation, a default user is created for the Database Authentication module. Username: super_user_1. Password: pass.

== Installing a production environment ==

Please note that running the server in development mode as shown in the quick-start guide is not recommended for production. Once you have made sure that the server works in development mode and wish to start using leihs properly, please run it in production mode (`RAILS_ENV='production' ./script/server`). Also, this quick-start guide does not cover running a Ruby on Rails application for production. Please look into http://www.modrails.com/[Phusion Passenger] or the Apache Mongrel cluster in the reference section for how to set up a production environment.

Without a real production environment, leihs can handle upwards of 1000 users (not concurrently, of course!). If you need better performance, you must set up a proper production environment.


== Free Software Statement ==

The Zurich University of the Arts supports Free Software http://www.gnu.org/philosophy/free-sw.html[as defined by the Free Software Foundation]. That's why leihs is Free Software licensed under the GNU GPL version 3.0. 

One of the advantages this freedom brings with it is that it enables anyone in the world to provide local support services for leihs at the same quality level as the Zurich University of the Arts can provide itself.

If you would like to take part in the development of leihs, please see our http://code.zhdk.ch/projects/leihs[project page].

== References ==

Setting up production environments with Rails:

* http://www.modrails.com/
* http://blog.codahale.com/2006/06/19/time-for-a-grown-up-server-rails-mongrel-apache-capistrano-and-you/

== Appendix A: ZHdK configuration file for mongrel cluster ==

As an example to help you set up a production environment, here is the Apache configuration we use. You will need mod_proxy:


----------------------------
<VirtualHost *:80>
   ServerName ausleihe.zhdk.ch

   DocumentRoot /home/rails/leihs/leihs/public/
   ErrorLog /var/log/apache2/leihs/error.log

   # Which Rails environment to use (production, testing, production)
   DefaultInitEnv RAILS_ENV production
   SetEnv RAILS_ENV production

  # Proxy balancer for leihs
  <Proxy balancer://leihs_cluster>
    BalancerMember http://127.0.0.1:10010
    BalancerMember http://127.0.0.1:10011
    BalancerMember http://127.0.0.1:10012
    BalancerMember http://127.0.0.1:10013
  </Proxy>


   # We want to completely ignore the application's own
   # .htaccess, as all relevant options are configured
   # right here in this file.
   <Directory /home/rails/leihs/leihs/public>
      AllowOverride none
   </Directory>


   # Don't do forward proxying
   ProxyRequests Off

   # Enable reverse proxying
   <Proxy *>
     Order deny,allow
     Allow from all
   </Proxy>

   RewriteEngine On

   # Check for maintenance file. Let apache load it if it exists
   RewriteCond %{DOCUMENT_ROOT}/system/maintenance.html -f
   RewriteRule . /system/maintenance.html [L]

   # Rewrite index to check for static
   RewriteRule ^/$ /index.html [QSA]

   # Let apache serve static files (send everything via mod_proxy that
   # is *no* static file (!-f)
   RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} !-f
   RewriteRule .* balancer://leihs_cluster%{REQUEST_URI} [L,P,QSA]
</VirtualHost>
----------------------------
