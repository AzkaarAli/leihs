.date_range
  .date
    ${moment(start_date).format(i18n.date.L)} - ${moment(end_date).format(i18n.date.L)}
  .range
    ${$days = moment(end_date).eod().diff(moment(start_date).sod(), "days"), ""}
    ${$days}
    ${_jed($days, "day")}
    
.clear
.list
  {{each(i, line) App.Line.mergeByModel(lines)}}
  {{if line.sublines}}
  {{each(j, subline) line.sublines}}
  %input{:type => :hidden, :name => "line_ids[]", :value => "${subline.id}"}
  {{/each}}
  {{else}}
  %input{:type => :hidden, :name => "line_ids[]", :value => "${line.id}"}
  {{/if}}
  
  {{if line.returned_quantity}}
  %input{:type => :hidden, :name => "returned_quantity[${line.id}]", :value => "${line.returned_quantity}"}
  {{/if}}
  
  %ul{:class => "line {{if !line.is_available}} unavailable{{/if}}"}
    .main
      %li.quantity
        {{if line.returned_quantity}}
        ${line.returned_quantity}
        = "/"
        {{/if}}
        ${line.quantity}
      %li.model
        ${line.model.name}
    {{if Line.get_problems(line).length}}
    %li.problems
      ${_jed("Problems")}
    {{/if}}
  {{/each}}  