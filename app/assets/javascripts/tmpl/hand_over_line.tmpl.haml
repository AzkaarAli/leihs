= link_to "backend/inventory_pools/${current_inventory_pool}/users/${user.id}/hand_over" do

  {{if overdue}}
  %li.overdue_icon
    .icon.hand_over.overdue
  %li.name.overdue
    ${user.firstname}
    ${user.lastname}
  {{else}}
  %li.name
    ${user.firstname}
    ${user.lastname}
  {{/if}}

  %li.items
    %span.number
      ${lines.length}
    %span.text
      = _("Items")
  
    .tip_target  
    .tip
      %table
        {{each(i, line) lines}}
        %tr
          %td.quantity
            ${line.quantity}
          %td.model_name
            %span.text
              {{html String(line.model.name).substring(0, 30) }}
              {{if String(line.model.name).length > 30}}
              {{html "..."}}
              {{/if}}
          %td.start_date
            {{html formatDate(new Date(line.start_date.replace(/-/g, "/")), i18n.selected.tips.dateFormat)}}
          %td.date_connector
            = "-"
          %td.end_date
            {{html formatDate(new Date(line.end_date.replace(/-/g, "/")), i18n.selected.tips.dateFormat)}}
        {{/each}}
  
  %li{:class => "range{{if overdue}} overdue{{/if}}"}
    %span.number
      {{if overdue}}
      ${Math.round((new Date() - new Date(date.replace(/-/g, "/"))) / (1000 * 60 * 60 * 24))}
      {{else}}
      ${Math.round((new Date(max_date.replace(/-/g, "/")) - new Date()) / (1000 * 60 * 60 * 24))}
      {{/if}}
    %span.text
      {{if overdue}}
      = _("Days overdue")
      {{else}}
      = _("Days max")
      {{/if}}
      
  %li.note
    %span{:class => "{{if overdue}}grey{{/if}}"}
      &raquo;
      {{if overdue}}
      {{html formatDate(new Date(date.replace(/-/g, "/")), i18n.selected.tips.dateFormat)}}
      {{else}}
      {{html formatDate(new Date(max_date.replace(/-/g, "/")), i18n.selected.tips.dateFormat)}}
      {{/if}}
      
%li.actions
  {{if overdue}}
  = link_to "javascript:void(0)", :class => "smallbutton red" do
    .icon.delete
    = _("Delete")
  {{/if}}
  = link_to "backend/inventory_pools/${current_inventory_pool}/users/${user.id}/hand_over", :class => "smallbutton white" do
    = _("Hand Over")
    .icon.hand_over
