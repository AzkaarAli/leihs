%section#topfilter
  
  %form.availability
    %input#date_from.date.start{:name => "startdate", :value => Date.today.strftime("%d.%m.%y")}
    = "-"
    %input#date_to.date.end{:name => "enddate", :value => Date.tomorrow.strftime("%d.%m.%y")}
    .checkarea
      %input#available-only.check{:type => "checkbox", :name => "available-only", :value => "available-only"}
      %label{:for => "available-only"}
        = _("Show Available")
          
  %form.sort{:method => "get"}
    .container
      %span.select
        %span.text
          = _("Productname (A-Z)")
        .arrow
      %select.styled{:name => "sort_and_sort_mode"}
        %option{:value => "name ASC"}= _("Productname (A-Z)")
        %option{:value => "name DESC"}= _("Productname (Z-A)")
        %option{:value => "manufacturer ASC"}= _("Manufacturer (A-Z)")
        %option{:value => "manufacturer DESC"}= _("Manufacturer (Z-A)")
  
  #ipSelector
    = link_to "javascript: void(0)" do
      %span.text
        != _("Parks (#{content_tag(:span, current_user.inventory_pools.length, :class => 'amount')})")
      %span.icon
    .container
      .hover
        .header
          .borderleft
          .inner
          .borderright
        .inner
          - current_user.inventory_pools.each do |ip|
            .line{:"data-id" => ip.id}
              %input{:type => "checkbox", :id => "ip-#{ip.id}", :"data-id" => ip.id}
              %label{:for => "ip-#{ip.id}", :title => ip.name, :"data-id" => ip.id}
                = truncate(ip.name, :length => 44)
          .borderleft
          .borderright
        .footer
          .borderleft
          .borderright
      

- content_for :head do
  = javascript_include_tag "jquery/i18n/jquery.ui.datepicker-#{current_user.language.locale_name.dasherize}.js"
  = javascript_include_tag "jquery/cookie/cookie.js"
          
:javascript
  
  $(document).ready(function(){
    ipSelector.setup();
    ModelsSort.setup();
  });
  
  /////// MODELS SORT ////////
  
  var ModelsSort = new ModelsSort();

  function ModelsSort() {
    
    this.setup = function() {
      this.setupBindings();
    }
    
    this.setupBindings = function() {
      // ON CHANGE SORT METHOD
      $('#topfilter .sort select').bind('change', function(){
          var _value = $(this).val();
          var _values = _value.split(" ");
          var _items = $("#modellist .item");
          
          if(_values[0] == "name") {
              if(_values[1] == "ASC") {
                  _items = _items.sort(ModelsSort.sortNameAlphabeticaly);
              } else if(_values[1] == "DESC") {
                  _items = _items.sort(ModelsSort.sortNameAlphabeticalyReverse);
              }
          } else if(_values[0] == "manufacturer") {
              if(_values[1] == "ASC") {
                  _items = _items.sort(ModelsSort.sortManufacturerAlphabeticaly);
              } else if(_values[1] == "DESC") {
                  _items = _items.sort(ModelsSort.sortManufacturerAlphabeticalyReverse);
              }
          }
          
          $('#modellist').html(_items);
          $("#topfilter .sort .select .text").html($("#topfilter .sort select option:selected").html());
          
      });
    }
    
    this.sortNameAlphabeticaly = function(a,b){
        return $(a).find(".name a").html().toUpperCase() > $(b).find(".name a").html().toUpperCase() ? 1 : -1;
    }
    
    this.sortNameAlphabeticalyReverse = function(a,b){
        return $(a).find(".name a").html().toUpperCase() < $(b).find(".name a").html().toUpperCase() ? 1 : -1;
    }
    
    this.sortManufacturerAlphabeticaly = function(a,b){
        return $(a).find(".manufacturer a").html().toUpperCase() > $(b).find(".manufacturer a").html().toUpperCase() ? 1 : -1;
    }
    
    this.sortManufacturerAlphabeticalyReverse = function(a,b){
        return $(a).find(".manufacturer a").html().toUpperCase() < $(b).find(".manufacturer a").html().toUpperCase() ? 1 : -1;
    }

  }
  
  /////// INVENTORY POOL SELECTOR ////////
  
  var ipSelector = new ipSelector();
  
  function ipSelector() {
  
    this.hover;
    this.animating;
    this.container;
    this.hight;
    this.width;
    this.activeIPs;
    
    this.setup = function() {
      ipSelector.setupHover();
      ipSelector.setupContainer();
      ipSelector.setupBindings();
      ipSelector.readCookieSettings();
      ipSelector.setIpSelector();
    }
    
    this.readCookieSettings = function() {
      ipSelector.activeIPs = $.parseJSON($.cookie('active_ips'));
    }
    
    this.setIpSelector = function() {
      $("#ipSelector .line").each(function(){
        if( $.inArray( $(this).data("id"), ipSelector.activeIPs ) >= 0 ) {
          $(this).find("input").attr("checked", true);
          $(this).find("label").addClass("checked");
        } else {
          $(this).find("input").removeAttr("checked");
          $(this).find("label").removeClass("checked");
        }
      });
      
      $("#ipSelector .text .amount").html(ipSelector.activeIPs.length);
      ipSelector.updateCookie();
      ipSelector.manipulateModelList();
    }
    
    this.manipulateModelList = function() {
      $("#modellist .item").each(function(i, v){
        var _ips = $(this).data("attributes").inventory_pool_ids;
        var r = $.intersection(_ips, ipSelector.activeIPs);
        if(r.length) {
          $(this).show(); 
        } else {
          $(this).hide();
        }
      });
    }
    
    this.updateCookie = function() {
      $.cookie('active_ips', JSON.stringify(ipSelector.activeIPs), { path: '/', expires: 1 });
    }
    
    this.setupBindings = function() {
      $("#topfilter #ipSelector a").bind("click", function() {
        ipSelector.toggle();
      });
      
      $("#topfilter #ipSelector .line input").bind("change", function() {
        if($(this).is(':checked')) {
          ipSelector.addActiveIP($(this).data("id"));
        } else {
          if(ipSelector.activeIPs.length > 1) {
            ipSelector.removeActiveIP($(this).data("id"));
          } else {
            $(this).attr("checked", true);
          }
        }
      });
    }
    
    this.addActiveIP = function(_id) {
      ipSelector.activeIPs.push(_id);
      ipSelector.setIpSelector();
    }
    
    this.removeActiveIP = function(_id) {
      ipSelector.activeIPs = ipSelector.activeIPs.remove(_id);
      ipSelector.setIpSelector();
    }
    
    /* This function provides functionality to remove a specific element inside an array (only works with jquery) */
    Array.prototype.remove = function(v) {
      return $.grep(this, function(e) {
          return e !== v;
      });
    };
    
    /* TODO: THIS IS NOT WORKING YET!! This function returns the intersection of two arrays (only works with jquery) */
    jQuery.intersection = function(a, b) {
      var result = new Array();
      $.each(b, function(i, v){
        if($.inArray(parseInt(v), a)){
          result.push(v);
        }
      });
      
      return result;
    }
    
    this.setupHover = function() {
      ipSelector.hover = $("#topfilter #ipSelector .container .hover");
    }
    
    this.setupContainer = function() {
      ipSelector.container =  $("#topfilter #ipSelector .container");
      ipSelector.hover.show();
      ipSelector.container.show();
      ipSelector.height = ipSelector.hover.height();
      ipSelector.container.height(ipSelector.height);
      ipSelector.width = ipSelector.hover.outerWidth();
      ipSelector.container.width(ipSelector.width);
      ipSelector.hover.hide();
      ipSelector.container.hide();
    }
    
    this.toggle = function() {
      if(ipSelector.container.css("display") == "block") {
        ipSelector.close();
      } else {
        ipSelector.open();
      }
    }
    
    this.open = function() {
      ipSelector.container.show();
      $("#ipSelector .text").addClass("open");
      ipSelector.hover.offset({top: -ipSelector.height});
      ipSelector.hover.stop(true, true).show().animate({
        top: 0
      }, function(){
        $(document).bind("click", ipSelector.checkClickWhileOpen);
      });
    }
    
    this.close = function() {
      $("#ipSelector .text").removeClass("open");
      ipSelector.hover.stop(true, true).show().animate({
        top: -ipSelector.height
      }, function() {
        ipSelector.container.hide();
        ipSelector.hover.hide();
        $(document).unbind("click", ipSelector.checkClickWhileOpen);
      });
    }
    
    this.checkClickWhileOpen = function(event){
      if($(event.target).closest("#ipSelector").length == 0) {
        ipSelector.close();
      }
    }
  }
  
  function update_availability(){
    var sd = $("#date_from").datepicker("getDate").getTime() / 1000;
    var ed = $("#date_to").datepicker("getDate").getTime() / 1000;
    
    $("[data-availability]").each(function(){
      var availability_ips = $(this).data('availability');
      // TODO filter active inventory_pools
      var min_ips = $.map(availability_ips, function(elem){
        var min = 0;
        var to_min = [];
        var f1 = elem.availability.filter(function(x){ return (x[0] < sd); });
        if(f1.length) to_min.push(f1[f1.length-1][1]);
        var f2 = elem.availability.filter(function(x){ return (sd <= x[0] && x[0] <= ed); });
        if(f2.length) to_min.push(Math.min.apply(Math, $.map(f2, function(x){ return x[1]; })));
        if(to_min.length) min = Math.min.apply(Math, to_min);
        return Math.max.apply(Math, [min, 0]);
      });
      // TODO get min, max or sum ???
      var absolute_min = Math.min.apply(Math, min_ips);
      $(this).html(absolute_min);
      //var max_from_one_ip = Math.max.apply(Math, min_ips);
      //$(this).html(max_from_one_ip);
    });
  }

  $(document).ready(function () {

    $.datepicker.setDefaults($.datepicker.regional['#{current_user.language.locale_name.dasherize}']);
    
    var dates = $('#topfilter .availability .date').datepicker({
      minDate: 0,
      showOtherMonths: true,
      selectOtherMonths: true,
      showButtonPanel: true,
      onClose: function(selectedDate, instance) {
        var option = this.id == "date_from" ? "minDate" : "maxDate",
            date = $.datepicker.parseDate(instance.settings.dateFormat || $.datepicker._defaults.dateFormat, selectedDate, instance.settings );
        dates.not( this ).datepicker( "option", option, date );

        update_availability();
      },
      dateFormat: '#{current_user.language.locale_name.dasherize=="de-CH" ? "dd.mm.y" : "dd/mm/y"}'
    });

    update_availability();
  });
