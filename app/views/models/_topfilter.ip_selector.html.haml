#ipselector
  = link_to "javascript: void(0)" do
    %span.text
      != _("Selected Pools (%s)") % content_tag(:span, "/#{current_user.inventory_pools.length}", :class => 'amount')
    %span.icon
  .container
    .rollout
      .inner
        - current_user.inventory_pools.each do |ip|
          .line{:"data-id" => ip.id}
            %input{:type => "checkbox", :id => "ip-#{ip.id}", :"data-id" => ip.id}
            %label{:for => "ip-#{ip.id}", :title => ip.name, :"data-id" => ip.id}
              = truncate(ip.name, :length => 44)

:javascript

  $(document).ready(function(){
      IpSelector.setup();
  });

  var IpSelector = new IpSelector();
  
  IpSelector.hideModellistItemsAtStartup();
  
  function IpSelector() {
  
    this.rollout;
    this.animating;
    this.container;
    this.hight;
    this.width;
    this.active_ips = new Array();
    
    this.setup = function() {
      this.setuprollout();
      this.setupContainer();
      this.setupBindings();
      this.setupFromStorage();
      this.setIpSelector();
    }
    
    this.hideModellistItemsAtStartup = function() {
      var sheet = document.createElement('style')
      sheet.innerHTML = "#modellist .item {display: none;}";
      document.head.appendChild(sheet);      
    }
    
    this.setupFromStorage = function() {
      var _params = #{params[:ipselector].blank? ? "undefined" : params[:ipselector].map{|x| x.to_i}.to_json};
      if(typeof(_params) == "object" && _params.length > 0) {
        IpSelector.active_ips = _params;
      } else if(sessionStorage.active_ips && JSON.parse(sessionStorage.active_ips).length != 0) {
        IpSelector.active_ips = JSON.parse(sessionStorage.active_ips);
      } else {
        IpSelector.selectAllIps();
      }
    }
    
    this.selectAllIps = function() {
      $("#ipselector .line").each(function(){
        IpSelector.active_ips.push($(this).data("id"));
      });
    }
    
    this.setIpSelector = function() {
      $("#ipselector .line").each(function(){
        if( $.inArray( $(this).data("id"), IpSelector.active_ips ) >= 0 ) {
          $(this).find("input").attr("checked", true);
          $(this).find("label").addClass("checked");
        } else {
          $(this).find("input").removeAttr("checked");
          $(this).find("label").removeClass("checked");
        }
      });
      
      $("#ipselector .text .amount").html(IpSelector.active_ips.length + "/" + $("#ipselector .line").length);
      IpSelector.updateStorage();
      IpSelector.manipulateModelList();
    }
    
    this.manipulateModelList = function() {
      $("#modellist .item").each(function(i, v){
        var _ipsAsObj = $(this).tmplItem().data.inventory_pools;
        var _ipsAsId = [];
        for (var i in _ipsAsObj){
          if(_ipsAsObj[i].id != undefined) {
            _ipsAsId.push(_ipsAsObj[i].id);
          }
        }
        
        var _active_ips = IpSelector.active_ips;
        var r = $.intersection(_ipsAsId, _active_ips);
        if(r.length) {
          $(this).show();
        } else {
          $(this).hide();
        }
      });
    }
    
    this.updateStorage = function() {
      sessionStorage.active_ips = JSON.stringify(IpSelector.active_ips);
    }
    
    this.setupBindings = function() {
      $("#topfilter #ipselector a").bind("click", function() {
        IpSelector.toggle();
      });
      
      $("#topfilter #ipselector .line input").bind("change", function() {
        if($(this).is(':checked')) {
          IpSelector.addActiveIP($(this).data("id"));
        } else {
          if(IpSelector.active_ips.length > 1) {
            IpSelector.removeActiveIP($(this).data("id"));
          } else {
            $(this).attr("checked", true);
          }
        }
      });
    }
    
    this.addActiveIP = function(_id) {
      IpSelector.active_ips.push(_id);
      IpSelector.setIpSelector();
    }
    
    this.removeActiveIP = function(_id) {
      IpSelector.active_ips = IpSelector.active_ips.remove(_id);
      IpSelector.setIpSelector();
    }
    
    /* This function provides functionality to remove a specific element inside an array (only works with jquery) */
    Array.prototype.remove = function(v) {
      return $.grep(this, function(e) {
          return e !== v;
      });
    };
    
    /* This function returns the intersection of two arrays (only works with jquery) */
    jQuery.intersection = function(a, b) {
      var result = new Array();
      $.each(a, function(i, v){
        if($.inArray(v, b) > -1){
          result.push(v);
        }
      });
      return result;
    }
    
    this.setuprollout = function() {
      IpSelector.rollout = $("#topfilter #ipselector .container .rollout");
    }
    
    this.setupContainer = function() {
      IpSelector.container =  $("#topfilter #ipselector .container");
      IpSelector.rollout.show();
      IpSelector.container.show();
      IpSelector.height = IpSelector.rollout.height();
      IpSelector.container.height(IpSelector.height);
      IpSelector.width = IpSelector.rollout.outerWidth();
      IpSelector.container.width(IpSelector.width);
      IpSelector.rollout.hide();
      IpSelector.container.hide();
    }
    
    this.toggle = function() {
      if(IpSelector.container.css("display") == "block") {
        IpSelector.close();
      } else {
        IpSelector.open();
      }
    }
    
    this.open = function() {
      IpSelector.container.show();
      $("#ipselector .text").addClass("open");
      IpSelector.rollout.offset({top: -IpSelector.height});
      IpSelector.rollout.stop(true, true).show().animate({
        top: 0
      }, function(){
        $(document).bind("click", IpSelector.checkClickWhileOpen);
      });
    }
    
    this.close = function() {
      $("#ipselector .text").removeClass("open");
      IpSelector.rollout.stop(true, true).show().animate({
        top: -IpSelector.height
      }, function() {
        IpSelector.container.hide();
        IpSelector.rollout.hide();
        $(document).unbind("click", IpSelector.checkClickWhileOpen);
      });
    }
    
    this.checkClickWhileOpen = function(event){
      if($(event.target).closest("#ipselector").length == 0) {
        IpSelector.close();
      }
    }
  }