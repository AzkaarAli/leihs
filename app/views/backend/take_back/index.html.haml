-content_for :title, _("List of Take Backs")
#take_backs.innercontent
  %h1= _("List of Take Backs")
  
  %hr
  
  %section.take_backs
    .inlinetabs
      = link_to [:backend, current_inventory_pool, :take_back, :index], :filter => "", :year => params[:year], :month => params[:month], :query => params[:query], :class => "tab#{' inactive' if params[:filter] && params[:filter] != ""}" do
        %span.text
          = _("All")
          
    .list
      %ul.navigation.line
        %li.search
          = form_tag("", :method => :get, :autocomplete => :off) do
            %input{:type => "query", :name => "query", :value => "#{params[:query]}", :"data-start_text" => _("Suchen...")}
            %input{:type => "hidden", :name => "year", :value => params[:year]}
            %input{:type => "hidden", :name => "month", :value => params[:month]}
            %input{:type => "hidden", :name => "filter", :value => params[:filter]}
            = image_tag "loading.gif", :class => "loading"
            -unless params[:query].blank?
              %strong
                = _("found %i") % @entries.total_entries
            = _("in")
            %strong
              = @total_entries
            = _("entries%s") % "."
          = image_tag "loading.gif", :class => "loading"
        %li.historical_search
      - if @entries.blank?
        %ul.line
          %li.name
            %strong
              = _("No entry found")
              - unless params[:query].blank?
                = _("for '%s'") % params[:query]
  
  - unless @entries.blank?
    .pagination_container

:javascript
  
  $(document).ready(function(){
  
    TakeBacksList.setup();
  });
  
  var TakeBacksList = new TakeBacksList();
  
  function TakeBacksList() {
    
    this.setup = function() {
      this.setupTemplates();
      this.setupPagination(); 
      this.setupHistoricalSearch();
    }
    
    this.setupTemplates = function() {
      $('.take_backs .list').append($.tmpl("tmpl/line", #{@entries.to_json}));
    }
    
    this.setupHistoricalSearch = function() {
      var first_date = new Date("#{@first_date}".replace(/-/g, "/"));
      var last_date = new Date("#{@last_date}".replace(/-/g, "/"));
      
      var options = {};
      var available_months = #{@available_months.to_json};
      
      if(available_months.length) options["available_months"] = available_months;
      options["selected_year"] = "#{params[:year]}";
      options["selected_month"] = "#{params[:month]}";
      options["callback"] = TakeBacksList.handleHistoricalSearchClick;
      if(String(first_date.valueOf()).toLowerCase() == "nan" && String(last_date.valueOf()).toLowerCase() == "nan" && available_months.length == 0) {
        options["show_months"] = false;
      }
      
      $(".take_backs .historical_search").historicalSearch(first_date, last_date, options);
    }
    
    this.handleHistoricalSearchClick = function(event) {
      event.preventDefault();
      var target = event.currentTarget;
      var params = window.location.search;
      
      // clean page when new date is selected
      params = params.replace(/\?*?\&*page\=\d+/, "");
      
      if($(target).hasClass("back")) {
        params = params.replace(/\?*?&*?year\=\d+/, "");
        params = params.replace(/\?*?&*?month\=\d+/, "");
      } else if($(target).data("year")) {
        if (params.match(/year\=/)) {
          params = params.replace(/year\=\d*/, "year="+$(target).data("year"));
        } else {
          if (params.match(/^\?/)) {
            params = params+"&year="+$(target).data("year");
          } else {
            params = "?year="+$(target).data("year");     
          }       
        }
      } else if($(target).data("month")) {
        if (params.match(/month\=/)) {
          params = params.replace(/month\=\d*/, "month="+$(target).data("month"));
        } else if (params.match(/^\?/)) {
          params = params+"&month="+$(target).data("month");
        } else {
          params = "?month="+$(target).data("month");      
        }
      }
      
      if(params == "?&") params ="";
      
      window.location = window.location.pathname + params;
      return false;
    }
        
    this.setupPagination = function() {
      var current_page = #{params[:page].blank? ? 0 : params[:page]};
          current_page = (current_page == 0) ? 0 : current_page-1;
      
      $(".pagination_container").pagination(#{@entries.total_entries}, {
        items_per_page: #{$per_page},
        callback: TakeBacksList.handlePaginationClick,
        current_page: current_page,
        num_display_entries: 7,
        num_edge_entries: 2,
        next_text: "#{_("Next")}",
        prev_text: "#{_("Previous")}"
      });
    }
    
    this.handlePaginationClick = function (new_page_index, pagination_container) {
      event.preventDefault();
      var params = window.location.search;
      var page_param = "page="+parseInt(new_page_index+1);
      
      if(params.match(/page\=\d+/)) {
        params = params.replace(/page\=\d+/, page_param);
      } else {
        if (params.match(/^\?/)) {
          params = params+"&"+page_param;
        } else {
          params = "?"+page_param;      
        }
      }
      
      window.location = window.location.pathname + params;
      return false;
    }
  }