%section
  %h2= _("Inventory")
  
  .inner
    .field
      %h3.key= _("Relevant for inventory")
      .value
        - if is_super_user?
          = f.select :is_inventory_relevant, { _("No") => false, _("Yes") => true}
        - else
          = f.hidden_field :is_inventory_relevant
          %span= @item.is_inventory_relevant? ? _("Yes") : _("No")

    .field
      %h3.key= _("Owner")
      .value
        - if is_super_user? or @item.new_record?
          - options = InventoryPool.all.map {|x| {:value => x.id, :label => x.name}}
          %label.container
            %input{:type => "hidden", :name => "item[owner_id]", :value => @item.owner_id, :"data-initial_value" => @item.owner_id }
            %input.autocomplete{:type => "text",
                                :placeholder => _("Owner"),
                                :title => _("Owner"),
                                :data => { :autocomplete_data => "#{options.to_json}",
                                           :autocomplete_element_tmpl => "tmpl/autocomplete/generic",
                                           :autocomplete_search_on_focus => 'true',
                                           :autocomplete_value_target => "[name='item[owner_id]']",
                                           :autocomplete_display_attribute => "label",
                                           :autocomplete_blur_on_select => "true" },
                                :value => @item.owner.try(:name) }
            .arrow.icon
                
        - else
          %span= @item.owner.name

    .field
      %h3.key= _("Last Checked")
      .value
        -if (is_privileged_user? or @item.new_record?)
          = f.date_select(:last_check, :order => [:year])
        -else
          %span= @item.last_check

    .field
      %h3.key= _("Responsible department")
      .value
        - if is_super_user? or @item.new_record?
          - options = if current_user.access_level_for(current_inventory_pool) == 2
            - [current_inventory_pool].map {|x| {:value => x.id, :label => x.name}}
          - else
            - [{:value => nil, :label => _("None")}] + InventoryPool.all.map {|x| {:value => x.id, :label => x.name}}
          %label.container
            %input{:type => "hidden", :name => "item[inventory_pool_id]", :value => @item.inventory_pool.id }
            %input.autocomplete{:type => "text",
                                :placeholder => _("Responsible department"),
                                :title => _("Responsible department"),
                                :data => { :autocomplete_data => "#{options.to_json}",
                                           :autocomplete_element_tmpl => "tmpl/autocomplete/generic",
                                           :autocomplete_search_on_focus => 'true',
                                           :autocomplete_value_target => "[name='item[inventory_pool_id]']",
                                           :autocomplete_display_attribute => "label",
                                           :autocomplete_blur_on_select => "true" },
                                :value => @item.inventory_pool.try(:name) }
            .arrow.icon
        - else
          = f.hidden_field :inventory_pool_id
          %span= @item.inventory_pool ? @item.inventory_pool.name : "-"

    .field
      %h3.key= _("Responsible person")
      .value
        -if (is_privileged_user? or @item.new_record?)
          = f.text_field(:responsible)
        -else 
          %span= @item.responsible

    .field
      %h3.key= _("User/Typical usage")
      .value
        - if is_super_user? or @item.new_record?
          = f.text_field :user_name
        - else
          %span= @item.user_name
          