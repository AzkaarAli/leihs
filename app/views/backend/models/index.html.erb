<% # TODO 03** categories and nested layout %>

<% unless request.xml_http_request? %>  
  <%= stylesheet_link_tag "/javascripts/ext/resources/css/ext-all.css" %>
  <%= javascript_include_tag "/javascripts/ext/adapter/prototype/ext-prototype-adapter.js" %>
  <%= javascript_include_tag "/javascripts/ext/ext-all.js" %>

<style type="text/css">
.x-tree .x-panel-body {
	background-color: transparent;
}
.x-tree-node .x-tree-node-over {
	background-color: #CCCCCC;
}
</style>

  <% javascript_tag do %>
    start = function(){

	  // create initial root node
      var categories_root = new Ext.tree.AsyncTreeNode({
        text: 'All',
        id:'ynode-0',
		leaf: false,
		real_id: '0'
      });
	  
	  var categories_loader = new Ext.tree.TreeLoader({
	    url:'/models/categories.ext_json',
	    requestMethod:'GET'
	  });

	  categories_loader.on("beforeload", function(treeLoader, node) {
        treeLoader.baseParams.category_id = (node.attributes.real_id ? node.attributes.real_id : 0);
      }, this);
	      
	  // create the tree
      var categories_panel = new Ext.tree.TreePanel({
        loader: categories_loader,
		title: 'Categories',
		collapsible: false,
		border: false,
		animate:true,
		autoScroll:true,
        root: categories_root,
        rootVisible:true,
		renderTo: 'categories',
		hlColor: '#FF0000',
		listeners: {
			click: function( node, e ){
				if(node.attributes.real_id != 0) node.toggle();
				new Ajax.Updater('list_table', '', {asynchronous:true, evalScripts:true, method:'get', parameters:'category_id=' + node.attributes.real_id}); return false;
			}
		}
      });
	  
	  // expand invisible root node to trigger load
      // of the first level of actual data
      categories_root.expand();
    };

	Ext.onReady(start);
  <% end %>
  
<table><tr>
<td id="categories" style="vertical-align:top;" width="20%">

</td>
<td style="vertical-align:top;" width="80%">
<% end %>  

<% if @model %>
	 <div class="toolbar-second">
		<%# form_for [:backend, @current_inventory_pool, @model, :compatibles] do %>
		<% form_tag backend_inventory_pool_model_compatibles_path(@current_inventory_pool, @model) do %>
			<%= _("Add compatible") %>:
			<%= model_auto_completer ('query', nil, 'compatible[model_id]', nil,
										{ :url => { :controller => 'models', :action => 'auto_complete' }, :submit_on_return => true },
										{ :size => 40 },
										{ :method => :get, :select => :name }) %>
			<%= submit_tag 'Submit' %>
		<% end %>
	 </div>
<% elsif params[:filter] == "packages" %>
	<div class="toolbar-second buttons">
		<%= link_to _('New Package'), :action => 'new_package' %>
	</div>
<% end %>

<% table_with_search_and_pagination :columns => ["", _("Model"), _("Items"), _("Compatibles"), _("Action")],
						   			:records => @models do |model| %>	

			<tr>
				<td><%= image_tag(model.images.first.public_filename(:thumb)) unless model.images.empty? %></td>
				<td><%= model.name %></td>
				<td><%= @current_inventory_pool.items.count(:conditions => {:model_id => model.id}) %></td>
				<td><%= (model.compatibles & @current_inventory_pool.models).size %></td>
				<td class="buttons" style="white-space: nowrap">
					<% if params[:source_path]
							var_id = (model.is_a?(Model) ? "model_id" : "model_group_id")
							glue = (params[:source_path].include?('?') ? '&' : '?' )
							url = "#{params[:source_path]}#{glue}#{var_id}=#{model.id}"
						%>
						<%=	link_to(image_tag($layout_public_path + "/images/icons/package_add.png") + " " + _("Add"), url,
							:method => 'post', :target=> '_top') %>
					<% else %>						
						<ul>
							<li><%= link_to _("Show"), backend_inventory_pool_model_path(@current_inventory_pool, model) %></li>
							<li><%= link_to _("Remove"), backend_inventory_pool_model_compatible_path(@current_inventory_pool, @model, model),
											:confirm => _("Are you sure?"),
											:method => :delete if @model %></li>
						</ul>
					<% end %>
				</td>
			</tr>


<% end %>

<% unless request.xml_http_request? %>  
</td>
</tr></table>
<% end %>  
