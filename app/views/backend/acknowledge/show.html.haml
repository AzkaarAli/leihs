-content_for :title, _("Order from %s") % @user

#acknowledge.innercontent
  .top
    %h1= yield :title
    %p.subtitle= "#{@order.quantity} Items for max. #{(@order.max_single_range).to_i} days straight"
      
    .content_navigation
      = link_to _("Reject"), reject_backend_inventory_pool_acknowledge_path(current_inventory_pool, @order),
        :class => "button red open_dialog",
        :"data-dialog_class" => "acknowledge with_comment",
        :"data-rel" => "tmpl/dialog/acknowledge/reject",
        :"data-on_success" => 'Dialog.add({content: $.tmpl("tmpl/dialog/loading", {title: "'+_("Rejection Successful")+'", message: "'+_("please wait...")+'"}), dialogClass: "loading"}); window.location = document.referrer',
        :"data-ref_for_dialog" => "$('#order').tmplItem().data"
      
      #approve.multibutton
        .alternatives
          .trigger.green
            .arrow
          = link_to approve_backend_inventory_pool_acknowledge_path(current_inventory_pool, @order),
            :class => "button white open_dialog", 
            :"data-dialog_class" => "acknowledge with_comment",
            :"data-rel" => "tmpl/dialog/acknowledge/approve",
            :"data-on_success" => 'Dialog.add({content: $.tmpl("tmpl/dialog/loading", {title: "'+_("Approval Successful")+'", message: "'+_("please wait...")+'"}), dialogClass: "loading"}); window.location = document.referrer',
            :"data-ref_for_dialog" => "$('#order').tmplItem().data" do
            .icon.edit
            = _("with comment")
        = link_to _("Approve Order"), approve_backend_inventory_pool_acknowledge_path(current_inventory_pool, @order),
          :remote => true,
          :method => :post,
          :class => "button green", 
          :"data-dialog_class" => "acknowledge",
          :"data-rel" => "tmpl/dialog/acknowledge/approve",
          :"data-on_success" => 'Dialog.add({content: $.tmpl("tmpl/dialog/loading", {title: "'+_("Approval Successful")+'", message: "'+_("please wait...")+'"}), dialogClass: "loading"}); window.location = document.referrer',
          :"data-ref_for_dialog" => "$('#order').tmplItem().data"
  
  .indent.purpose
    %section.purpose
      %label= _("Purpose")
      %p= "#{@order.purpose}"
      
  .indent      
    = form_tag add_line_backend_inventory_pool_acknowledge_path(current_inventory_pool, @order), :id => "add_item", :method => :post, :remote => true, :"data-submit_button" => true do
      .dates
        .container
          %input.start.date{:type => "text", :name => "start_date", :id => "add_start_date", :"data-date" => (@order.min_date).blank? ? Date.today : @order.min_date , :title => _("Start Date")}
          %label{:for => "add_start_date"}
            = _("Start Date")
          %label.datepicker.icon{:for => "add_start_date", :title => _("Open Datepicker")}
        = "-"
        .container
          %input.end.date{:type => "text", :name => "end_date", :id => "add_end_date", :"data-date" => (@order.max_date).blank? ? Date.today : @order.max_date, :title => _("End Date")}
          %label{:for => "add_end_date"}
            = _("End Date")
          %label.datepicker.icon{:for => "add_end_date", :title => _("Open Datepicker")}  
            
      .quick_add_box
        %input.autocomplete{:type => "text", :name => "code", :placeholder => _('Name / Code'), :autocomplete => "off", :id => "quick_add", 
        :"data-autocomplete_class" => "add_item", 
        :"data-url" => backend_inventory_pool_models_path(current_inventory_pool),
        :"data-autocomplete_select_callback" => "AcknowledgeOrder.autocomplete_add_item"}
        %label{:for => "quick_add"}
          = _("Quick Add")
        
      %button.button.white{:type => "submit", :"data-on_success" => 'AcknowledgeOrder.update_order(response)'}
        .icon.additem
        = _("Add")
        
    #selection_actions
      .selection
        = _("Auswahl")
        %span.count= "(0)"
      .actions
        .multibutton
          .alternatives
            .trigger
              .arrow
            = link_to "/backend/inventory_pools/${current_inventory_pool}/acknowledge/${id}/reject", :class => "button white", :remote => "true" do
              .icon.valuelist
              = _("Value List")
            = link_to "/backend/inventory_pools/#{current_inventory_pool.id}/acknowledge/#{@order.id}/update_lines",
            :class => "button white",
            :remote => "true",
            :method => "post",
            :"data-rel" => "tmpl/dialog/order_line/delete_multiple",
            :"data-dialog_class" => "order_line",
            :"data-on_success" => '$.each($(_this).data("lines"), function(line){List.remove_line($(this), "red");})' ,
            :"data-ref_for_dialog" => "$(_this).data()",
            :id => "delete_selection" do
              .icon.delete
              = _("Delete")
          = link_to "/backend/inventory_pools/#{current_inventory_pool.id}/acknowledge/#{@order.id}/update_lines", 
          :class => "button white open_dialog",
          :"data-rel" => "tmpl/dialog/calendar/edit_multiple", 
          :"data-dialog_class" => "calendar multiple",
          :"data-on_success" => 'AcknowledgeOrder.update_order(response);',
          :"data-ref_for_dialog" => "$('#order').tmplItem().data",
          :id => "edit_selection" do
            .icon.timerange
            = _("Edit Selection")
    .clear
    
  %hr
  
  %section#order

:javascript
  
  $(document).ready(function(){
    AcknowledgeOrder.setup();
    SelectionActions.setup($("#order"));
    
    $("#edit_selection").on("click", function(event){
      SelectionActions.storeSelectedLines();
    });
  });
  
  var AcknowledgeOrder = new AcknowledgeOrder();
  
  function AcknowledgeOrder() {
  
    this.setup = function () {
      this.setupPurpose();
      this.setupDatepicker();
      this.setupTemplates();
      AcknowledgeOrder.checkApproveOrderAvailability();
    }
    
    this.autocomplete_add_item = function(element) {
      var id = element.item.id;
      $("#quick_add").val(id)
      $("#quick_add").attr("name", "model_id")
      $("#quick_add").closest("form").submit()
      $("#quick_add").attr("name", "code")
      $("#quick_add").val("")
      $("#quick_add").autocomplete("widget").hide()
    }
    
    this.update_order = function(order) {
      // reset the order template with the new data
      $("#order").html("");
      $('#order').replaceWith($.tmpl("tmpl/order", order));
      
      // update the subtitle numbers
      var subtitle_text = $("#acknowledge .subtitle").html();
      subtitle_text.replace(/^\d+/, order.quantity);
      subtitle_text.replace(/\s\d+/, " "+new MaxRange(order.lines).value);
      $("#acknowledge .subtitle").html(subtitle_text);
      
      
      // restore lines which were selected before re templating
      SelectionActions.restoreSelectedLines();
    }
    
    this.checkApproveOrderAvailability = function () {
      if ($("#order").find(".lines").length == 0) {
        Buttons.disable($("#approve.multibutton"));
      } else {
        Buttons.enable($("#approve.multibutton"));
      }      
    }
    
    this.setupPurpose = function () {
      if($(".indent.purpose").height() > 70){
        $(".indent.purpose").addClass("collapsed");
        $(".indent.purpose").after("<div class='showmore'></div>");
      }
      
      $(".indent.purpose.collapsed").live("click", function(){
        $(this).removeClass("collapsed");
        $(this).addClass("expanded");
      });
      
      $(".indent.purpose.expanded").live("click", function(){
        $(this).removeClass("expanded");
        $(this).addClass("collapsed");
      });
    }
    
    this.setupTemplates = function () {
      $('#acknowledge #order').replaceWith($.tmpl("tmpl/order", #{@order_json}));
    }
    
    this.setupDatepicker = function () {
      $.datepicker.setDefaults({
        closeText: i18n.close,
        prevText: '&lt;',
        nextText: '&gt;',
        currentText: i18n.today,
        monthNames: i18n.months.full,
        monthNamesShort: i18n.months.trunc,
        dayNames: i18n.days.full,
        dayNamesShort: i18n.days.trunc,
        dayNamesMin: i18n.days.trunc,
        weekHeader: 'Wo',
        dateFormat: i18n.datepicker.L,
        firstDay: i18n.days.first,
        isRTL: false,
        showMonthAfterYear: false,
        yearSuffix: ''
      });
      
      $('#add_item .dates input').each(function(){
        // format date
        var date_today = moment($(this).data("date")).sod();
        $(this).val(moment(date_today).format(i18n.date.L));
        
        // setup datepicker
        $(this).datepicker({
          showOtherMonths: true,
          selectOtherMonths: true,
        });
        
        // set min date only for end date
        if($(this).hasClass("end")) {
          $(this).datepicker( "option", "minDate", date_today.toDate());
        }
        
        // set min date updater when start date is closed
        if($(this).hasClass("start")) {
          $(this).change(function(){
            var min_date = $(this).datepicker("getDate");
            var end_date_element = $(this).closest(".dates").find(".end");
            
            end_date_element.datepicker("option", "minDate", min_date);
            end_date_element.val(moment(min_date).sod().add("days",1).format(i18n.date.L));
          });
        }
      });
    }
  }
