-content_for :title, _("Order from %s") % @user

#acknowledge.innercontent
  .top
    %h1= _("Order from %s") % @user
    %p.subtitle= "#{@order.quantity} Items for max. #{(@order.max_single_range).to_i} days straight"
      
    .content_navigation
      = link_to _("Reject"), reject_backend_inventory_pool_user_acknowledge_path(current_inventory_pool, @order.user, @order),
        :class => "button red open_dialog",
        :"data-dialog_class" => "acknowledge with_comment",
        :"data-rel" => "tmpl/dialog/acknowledge/reject",
        :"data-on_success" => 'Dialog.add({content: $.tmpl("tmpl/dialog/loading", {title: "'+_("Rejection Successful")+'", message: "'+_("please wait...")+'"}), dialogClass: "loading"}); window.location = document.referrer',
        :"data-ref_for_dialog" => "$('#order').tmplItem().data"
      
      #approve.multibutton
        .alternatives
          .trigger.green
            .arrow
          = link_to approve_backend_inventory_pool_user_acknowledge_path(current_inventory_pool, @order.user, @order),
            :class => "button white open_dialog", 
            :"data-dialog_class" => "acknowledge with_comment",
            :"data-rel" => "tmpl/dialog/acknowledge/approve",
            :"data-on_success" => 'Dialog.add({content: $.tmpl("tmpl/dialog/loading", {title: "'+_("Approval Successful")+'", message: "'+_("please wait...")+'"}), dialogClass: "loading"}); window.location = document.referrer',
            :"data-ref_for_dialog" => "$('#order').tmplItem().data" do
            .icon.edit
            = _("with comment")
        = link_to _("Approve Order"), approve_backend_inventory_pool_user_acknowledge_path(current_inventory_pool, @order.user, @order),
          :remote => true,
          :method => :post,
          :class => "button green", 
          :"data-dialog_class" => "acknowledge",
          :"data-rel" => "tmpl/dialog/acknowledge/approve",
          :"data-on_success" => 'Dialog.add({content: $.tmpl("tmpl/dialog/loading", {title: "'+_("Approval Successful")+'", message: "'+_("please wait...")+'"}), dialogClass: "loading"}); window.location = document.referrer',
          :"data-ref_for_dialog" => "$('#order').tmplItem().data"
  
  .indent.purpose
    %section.purpose
      %label= _("Purpose")
      %p= "#{@order.purpose}"
      
  .indent      
    %section.actiongroup
      %section#add_item 
        .dates
          .container
            %input.date.start{:name => "add_start_date", :id => "add_start_date", :value => (@order.min_date).blank? ? Date.today : @order.min_date , :title => _("Start Date")}
            %label{:for => "add_start_date"}
              = _("Start Date")
            %label.datepicker.icon{:for => "add_start_date", :title => _("Open Datepicker")}
          = "-"
          .container
            %input.date.end{:name => "add_end_date", :id => "add_end_date", :value => (@order.max_date).blank? ? Date.today : @order.max_date, :title => _("End Date")}
            %label{:for => "add_end_date"}
              = _("End Date")
            %label.datepicker.icon{:for => "add_end_date", :title => _("Open Datepicker")}  
              
        .item_code
          %input{:type => "text", :name => "barcode_field", :value => "", :placeholder => _('Code / Name'), :name => "barcode_field", :class => "barcode"}
          %label{:for => "barcode_field"}
            = _("Quick Add")
          
        = link_to "/backend/inventory_pools/#{current_inventory_pool.id}/models", :class=> "button white open_dialog add_item",
        :"data-rel" => "tmpl/dialog/add_item/add_item",
        :"data-on_success" => '',
        :"data-ref_for_dialog" => "$('#order').tmplItem().data",
        :"data-dialog_class" => "add_item" do
          .icon.additem
          = _("Add Item")
          
      #selection_actions
        .selection
          %label
            = radio_button_tag "selection_range", "all"
            = _("All")
          %label
            = radio_button_tag "selection_range", "selection"
            = _("Auswahl")
            %span.count= "(0)"
        .actions
          .multibutton
            .alternatives
              .trigger
                .arrow
              = link_to "/backend/inventory_pools/${current_inventory_pool}/users/${user.id}/acknowledge/${id}/reject", :class => "button white", :remote => "true" do
                .icon.valuelist
                = _("Value List")
              = link_to "/backend/inventory_pools/#{current_inventory_pool.id}/users/#{@order.user.id}/acknowledge/#{@order.id}/update_lines",
              :class => "button white",
              :remote => "true",
              :method => "post",
              :"data-rel" => "tmpl/dialog/order_line/delete_multiple",
              :"data-dialog_class" => "order_line",
              :"data-on_success" => '$.each($(_this).data("lines"), function(line){List.remove_line($(this), "red");})' ,
              :"data-ref_for_dialog" => "$(_this).data()",
              :id => "delete_selection" do
                .icon.delete
                = _("Delete")
            = link_to "/backend/inventory_pools/#{current_inventory_pool.id}/users/#{@order.user.id}/acknowledge/#{@order.id}/update_lines", 
            :class => "button white open_dialog",
            :"data-rel" => "tmpl/dialog/calendar/edit_multiple", 
            :"data-dialog_class" => "calendar multiple",
            :"data-on_success" => 'AcknowledgeOrder.update_order(response);',
            :"data-ref_for_dialog" => "$('#order').tmplItem().data",
            :id => "edit_selection" do
              .icon.timerange
              = _("Edit Selection")
      .clear
    
  %hr
  
  %section#order

:javascript
  
  $(document).ready(function(){
    AcknowledgeOrder.setup();
    SelectionActions.setup();
  });
  
  var AcknowledgeOrder = new AcknowledgeOrder();
  
  function AcknowledgeOrder() {
  
    this.setup = function () {
      this.setupPurpose();
      this.setupDatepicker();    
      this.setupTemplates();
      AcknowledgeOrder.checkApproveOrderAvailability();
    }
    
    this.update_order = function(order) {
      console.log("UPDATE ORDER");
      // reset the order template with the new data
      $("#order").html("");
      $('#order').replaceWith($.tmpl("tmpl/order", order));
      
      // update the subtitle numbers
      var subtitle_text = $("#acknowledge .subtitle").html();
      subtitle_text.replace(/^\d+/, order.quantity);
      subtitle_text.replace(/\s\d+/, " "+new MaxRange(order.lines).value);
      $("#acknowledge .subtitle").html(subtitle_text);
      
      
      // restore lines which were selected before re templating
      SelectionActions.restoreSelectedLines();
    }
    
    this.checkApproveOrderAvailability = function () {
      if ($("#order").find(".lines").length == 0) {
        Buttons.disable($("#approve.multibutton"));
      } else {
        Buttons.enable($("#approve.multibutton"));
      }      
    }
    
    this.setupPurpose = function () {
      if($(".indent.purpose").height() > 70){
        $(".indent.purpose").addClass("collapsed");
        $(".indent.purpose").after("<div class='showmore'></div>");
      }
      
      $(".indent.purpose.collapsed").live("click", function(){
        $(this).removeClass("collapsed");
        $(this).addClass("expanded");
      });
      
      $(".indent.purpose.expanded").live("click", function(){
        $(this).removeClass("expanded");
        $(this).addClass("collapsed");
      });
    }
    
    this.setupTemplates = function () {
      $('#acknowledge #order').replaceWith($.tmpl("tmpl/order", #{@order_json}));
    }
    
    this.setupDatepicker = function () {
      $.datepicker.setDefaults(i18n.selected.datepicker_backend);
      
      $('#add_item .dates input').each(function(){
        // format date
        if(! $(this).val().match(/\./)) {
          var date = new Date($(this).val().replace(/-/g, "/"));
          $(this).val($.datepicker.formatDate(i18n.selected.datepicker_backend.dateFormat, date));
        }
        
        // setup datepicker
        $(this).datepicker({
          showOtherMonths: true,
          selectOtherMonths: true,
        });
        
        // set min date only for end date
        if($(this).hasClass("end_date")) {
          $(this).datepicker( "option", "minDate", date);
        }
        
        // set min date updater when start date is closed
        if($(this).hasClass("start_date")) {
          $(this).change(function(){
            var date = $(this).datepicker("getDate");
            $(this).siblings(".end_date").datepicker("option", "minDate", date);
          });
        }
      });
    }
  }
