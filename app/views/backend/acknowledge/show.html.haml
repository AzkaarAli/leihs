-content_for :title, _("Order from %s") % @user

#acknowledge.innercontent{:"data-order" => @order.to_json}
  .top
    %h1= _("Order from %s") % @user
    %p.subtitle
      %strong
        = _("%i Items:") % @order.quantity
      "#{@order.purpose}"
      
    .content_navigation
      = link_to _("Reject"), reject_backend_inventory_pool_user_acknowledge_path(current_inventory_pool, @order.user, @order),
        :class => "button red open_dialog",
        :"data-dialog_class" => "acknowledge",
        :"data-rel" => "tmpl/dialog/acknowledge/reject",
        :"data-on_success" => 'Dialog.add({content: $.tmpl("tmpl/dialog/loading"), dialogClass: "loading"}); window.location = document.referrer',
        :"data-ref_for_dialog" => "$(this).closest('.innercontent').data('order')"
      
      .multibutton
        .alternatives
          .trigger.green
            .arrow
          = link_to approve_backend_inventory_pool_user_acknowledge_path(current_inventory_pool, @order.user, @order),
            :class => "button white open_dialog", 
            :"data-dialog_class" => "acknowledge",
            :"data-rel" => "tmpl/dialog/acknowledge/approve_with_comment",
            :"data-on_success" => 'Dialog.add({content: $.tmpl("tmpl/dialog/loading"), dialogClass: "loading"}); window.location = document.referrer',
            :"data-ref_for_dialog" => "$(this).closest('.innercontent').data('order')" do
            .icon.edit
            = _("with comment")
        = link_to _("Approve Order"), approve_backend_inventory_pool_user_acknowledge_path(current_inventory_pool, @order.user, @order),
          :remote => true,
          :method => :post,
          :class => "button green", 
          :"data-dialog_class" => "acknowledge",
          :"data-rel" => "tmpl/dialog/acknowledge/approve",
          :"data-on_success" => 'Dialog.add({content: $.tmpl("tmpl/dialog/loading"), dialogClass: "loading"}); window.location = document.referrer',
          :"data-ref_for_dialog" => "$(this).closest('.innercontent').data('order')"
      
  %section.actiongroup
    = render :partial => '/backend/items/add_item'
    #selection_actions
      .selection
        %label
          = radio_button_tag "selection_range", "all"
          = _("All")
        %label
          = radio_button_tag "selection_range", "selection"
          = _("Auswahl")
          %span.count= "(0)"
      .actions
        .multibutton
          .alternatives
            .trigger
              .arrow
            = link_to "/backend/inventory_pools/${current_inventory_pool}/users/${user.id}/acknowledge/${id}/reject", :class => "button white", :remote => "true" do
              .icon.valuelist
              = _("Value List")
            = link_to "/backend/inventory_pools/${current_inventory_pool}/users/${user.id}/acknowledge/${id}/reject", :class => "button white", :remote => "true" do
              .icon.delete
              = _("Delete")
          = link_to "/backend/inventory_pools/${current_inventory_pool}/users/${user.id}/acknowledge/${id}/reject", :class => "button white", :remote => "true" do
            .icon.timerange
            = _("Edit Selection")
    .clear
    
  %hr
  
  %section.linegroups

:javascript
  
  $(document).ready(function(){
    AcknowledgeOrder.setup();
    SelectionActions.setup();
  });
  
  var AcknowledgeOrder = new AcknowledgeOrder();
  
  function AcknowledgeOrder() {
  
    this.setup = function () {
      this.setupDatepicker();    
      this.setupTemplates();
    }
    
    this.setupTemplates = function () {
      $('#acknowledge .linegroups').append($.tmpl("tmpl/linegroup", #{@grouped_lines.to_json}));
    }
    
    this.setupDatepicker = function () {
      $.datepicker.setDefaults(i18n.selected.datepicker_backend);
      
      $('#add_item .dates input').each(function(){
        // format date
        if(! $(this).val().match(/\./)) {
          var date = new Date($(this).val().replace(/-/g, "/"));
          $(this).val($.datepicker.formatDate(i18n.selected.datepicker_backend.dateFormat, date));
        }
        
        // setup datepicker
        $(this).datepicker({
          showOtherMonths: true,
          selectOtherMonths: true,
        });
        
        // set min date only for end date
        if($(this).hasClass("end_date")) {
          $(this).datepicker( "option", "minDate", date);
        }
        
        // set min date updater when start date is closed
        if($(this).hasClass("start_date")) {
          $(this).change(function(){
            var date = $(this).datepicker("getDate");
            $(this).siblings(".end_date").datepicker("option", "minDate", date);
          });
        }
      });
    }
  }