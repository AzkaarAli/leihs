<%

    require 'iconv'

    # TODO: move to helper
    def filter(text)
      ic = Iconv.new('iso-8859-1//IGNORE//TRANSLIT','utf-8')
      ic.iconv(text)
    end

    def user_address
      @contract.user.name
    end

    leftmargin = 25.0
    topmargin = 15.0
    rightmargin = 20.0

    pdf = FPDF.new('Portrait', 'mm', 'A4')
    pdf.SetMargins(leftmargin, topmargin, rightmargin)
    
	pdf.AddPage


    pdf.SetFont('Arial', 'B', 16)
	pdf.Cell(40, 10, filter(_("Contract no. %d")) % @contract.id )
	pdf.Ln()

    
    # Legal text for contract TODO: get this info from system configuration, i.e. the DB
    pdf.SetFont('Arial', '', 10)
    pdf.Write(5, filter(_('This lending contract covers borrowing the following items by the person (natural or legal) described as "borrowing party" above. Use of these items is only allowed for the purpose given below.')) )
    pdf.Ln(8)


    # Information about the parties involved in the contract

    if pdf.GetY < 51.0
      # Move address to at least 54 mm from top so that the borrower address shows up
      # in a standard C5 envelope with address window on the left
      pdf.SetY(51.0)
    end
    
    parties_x = pdf.GetX
    parties_y = pdf.GetY

    pdf.SetFont('Arial', 'B', 10)
    pdf.Cell(40, 5, filter(_("Borrowing party:")))

    # Width of the address blocks and distance between one another
    blockwidth = 80
    blockspacing = 10

    # Move below the previous cell
    pdf.SetXY( parties_x, parties_y + 5)

    # Print borowing party
    pdf.SetFont('Arial', '', 10)
    pdf.MultiCell(blockwidth, 5, filter(user_address))

    below_borrower_y = pdf.GetY


    # Put some distance between the parties
    pdf.SetXY(parties_x + blockwidth + blockspacing, parties_y)

    # Print lending party
    pdf.SetFont('Arial', 'B', 10)
    pdf.Cell(40, 5, filter(_("Lending party:")))

    pdf.SetXY( parties_x + blockwidth + blockspacing, parties_y + 5)

    pdf.SetFont('Arial', '', 10)
    pdf.MultiCell(blockwidth, 5, filter("Zürcher Hochschule der Künste\nAusstellungsstr. 60\n8031 Zürich"))
    below_lender_y = pdf.GetY


    pdf.SetY( [below_borrower_y, below_lender_y].max)
    pdf.Ln



    # Colors, line width and bold font
    pdf.SetTextColor(0)
    pdf.SetFillColor(200, 200, 200)
    pdf.SetDrawColor(150, 150, 150)
    pdf.SetLineWidth(0.3)
    pdf.SetFont('Arial', '', 9)

    # Table Header
    # TODO: ugly filters. more elegant way?
    item_table_header = [filter(_("Qt")), filter(_("Inventory Code")), filter(_("Model")),  filter(_("Start date")), filter(_("End date")), filter(_("Returned date"))]

    w = [6.0, 25.0, 69.0, 22.0, 22.0, 22.0]
    0.upto(item_table_header.length - 1) do |i|
      pdf.Cell(w[i], 5, item_table_header[i], 1, 0, 'C', 1)
    end
    pdf.Ln()

    pdf.SetFillColor(224, 235, 255)

    # Items to hand over
    fill = 0

    @contract.lines.each do |l|

      line_start_x = pdf.GetX
      line_start_y = pdf.GetY

      pdf.SetXY(line_start_x + w[0] + w[1], line_start_y)

      before_description_x = pdf.GetX
      before_description_y = pdf.GetY

      pdf.MultiCell(w[2], 5, filter(l.model.name),  'LR', 'L', fill)

      after_description_x = before_description_x + w[2]
      after_description_y = pdf.GetY

      cell_height = after_description_y - before_description_y

      pdf.SetXY(line_start_x, line_start_y)
      pdf.Cell(w[0], cell_height, l.quantity.to_s, 'LR', 0, 'R', fill)
      pdf.Cell(w[1], cell_height, l.item.inventory_code, 'LR', 0, 'L', fill)

      # Prints the rest of the cells where we'd expect them, after the MultiCell
      pdf.SetXY(after_description_x, line_start_y)
      pdf.Cell(w[3], cell_height, short_date(l.start_date).to_s, 'LR', 0, 'R', fill)
      pdf.Cell(w[4], cell_height, short_date(l.end_date).to_s, 'LR', 0, 'R', fill)
      pdf.Cell(w[5], cell_height, short_date(l.returned_date).to_s, 'LR', 0, 'R', fill)
      pdf.Ln()
      fill = (fill == 0 ? 1 : 0)
    end

    pdf.Cell(w.sum, 0, '', 'T')


    pdf.SetFont('Arial', '', 10)


    # Purpose
    pdf.Ln(5)

    if @contract.purpose.nil?
      purpose = _("No purpose given.")
    else
      purpose = @contract.purpose
    end

    pdf.Write(5, filter(_("Purpose:")) + " " + filter(purpose) )

    # Contract notes
    unless @contract.note.nil? or @contract.note.empty?
      pdf.Ln(6)
      pdf.Write(5, filter(_("Additional notes:")) + " " + filter(@contract.note) )
     
    end

    pdf.Ln(10)

    pdf.SetFont('Arial', '', 7)
    # TODO english
    pdf.Write(3, filter("Die Benutzerin/der Benutzer ist bei unsachgemässer Handhabung oder Verlust schadenersatzpflichtig. Sie/Er verpflichtet sich, das Material sorgfältig zu behandeln und gereinigt zu retournieren. Bei mangelbehafteter oder verspäteter Rückgabe kann eine Ausleihsperre (bis zu 6 Monaten) verhängt werden. Das geliehene Material bleibt jederzeit uneingeschränktes Eigentum der Zürcher Hochschule der Künste und darf ausschliesslich für schulische Zwecke eingesetzt werden. Mit ihrer/seiner Unterschrift akzeptiert die Benutzerin/der Benutzer diese Bedingungen sowie die 'Richtlinie zur Ausleihe von Sachen' der ZHdK und etwaige abteilungsspezifische Ausleih-Richtlinien."))
    pdf.SetFont('Arial', '', 10)

    pdf.Ln(15)



    signature_text = filter(_("Signature of borrower:"))
    signature_cellwidth = (signature_text.length * 1.8).to_f
    pdf.Cell(signature_cellwidth, 0, signature_text , 0, 0)
    pdf.SetDrawColor(0,0,0)
    after_signature_x = pdf.GetX

    pdf.Cell(50, 0, Date.today.strftime("%d.%m.%Y"), 0, 0)


    pdf.Line(after_signature_x, pdf.GetY + 3, 175.0, pdf.GetY + 3)


%>

<%= pdf.Output() %>
