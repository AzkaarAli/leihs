<%

    require 'iconv'

    # TODO: move to helper
    def filter(text)
      ic = Iconv.new('iso-8859-1','utf-8')
      ic.iconv(text)
    end

    leftmargin = 25.0
    topmargin = 15.0
    rightmargin = 20.0

    pdf = FPDF.new('Portrait', 'mm', 'A4')
    pdf.SetMargins(leftmargin, topmargin, rightmargin)
    
	pdf.AddPage


    pdf.SetFont('Arial', 'B', 16)
	pdf.Cell(40, 10, filter(_("Contract no. %d")) % @contract.id )
	pdf.Ln()


    # Information about the parties involved in the contract

    parties_x = pdf.GetX
    parties_y = pdf.GetY

    pdf.SetFont('Arial', 'B', 10)
    pdf.Cell(40, 5, filter(_("Lending party:")))

    # Width of the address blocks and distance between one another
    blockwidth = 80
    blockspacing = 10

    # Move below the previous cell
    pdf.SetXY( parties_x, parties_y + 5)
    pdf.SetFont('Arial', '', 10)
    pdf.MultiCell(blockwidth, 5, filter("Zürcher Hochschule der Künste\nAusstellungsstr. 60\n8031 Zürich"))



    pdf.SetFont('Arial', 'B', 10)
    pdf.SetXY(parties_x + blockwidth + blockspacing, parties_y)
    pdf.Cell(40, 5, filter(_("Borrowing party:")))

    pdf.SetXY( parties_x + blockwidth + blockspacing, parties_y + 5)
    pdf.SetFont('Arial', '', 10)
    pdf.MultiCell(blockwidth, 5, filter("Zürcher Hochschule der Künste\nAusstellungsstr. 60\n8031 Zürich"))


	pdf.Ln()


    # Legal text for contract TODO: get this info from system configuration, i.e. the DB

    #pdf.MultiCell(40, 5, _('This lending contract covers the borrowing of the following items by the person (natural or legal) described as "borrowing party" above. Use of these items is only allowed for the purpose given below.'))

    pdf.Write(5, filter(_('This lending contract covers borrowing the following items by the person (natural or legal) described as "borrowing party" above. Use of these items is only allowed for the purpose given below.')) )

    pdf.Ln(8)

    # Colors, line width and bold font
    pdf.SetTextColor(0)
    pdf.SetFillColor(200, 200, 200)
    pdf.SetDrawColor(150, 150, 150)
    pdf.SetLineWidth(0.3)
    pdf.SetFont('Arial', '', 10)

    # Table Header
    # TODO: ugly filters. more elegant way?
    item_table_header = [filter(_("Qt.")), filter(_("Model")), filter(_("Inventory Code")), filter(_("Start date")), filter(_("End date")), filter(_("Returned date"))]

    w = [10.0, 65.0, 25.0, 22.0, 22.0, 22.0]
    0.upto(item_table_header.length - 1) do |i|
      pdf.Cell(w[i], 7, item_table_header[i], 1, 0, 'C', 1)
    end
    pdf.Ln()

    pdf.SetFillColor(224, 235, 255)

    # Items to hand over
    fill = 0

    @contract.lines.each do |l|
      line_start_x = pdf.GetX
      line_start_y = pdf.GetY


      multi_y_before = pdf.GetY

      pdf.MultiCell(w[1], 6, l.model.name, 'LR', 0, 'L', fill)

      multi_y_after = pdf.GetY
      multi_x_after = pdf.GetX

      cell_height = multi_y_after - multi_y_before


      # Prints the first cell before the multicell, because we didn't know
      # the line height achieved by the linebreak-savvy MultiCell before
      # actually calling pdf.MultiCell
      pdf.SetXY(line_start_x, line_start_y)
      pdf.Cell(w[0], cell_height, l.quantity.to_s, 'LR', 0, 'L', fill)



      # Prints the rest of the cells where we'd expect them, after the MultiCell
      pdf.SetXY(multi_x_after, multi_y_after)
      pdf.Cell(w[2], cell_height, l.item.inventory_code, 'LR', 0, 'L', fill)
      pdf.Cell(w[3], cell_height, short_date(l.start_date).to_s, 'LR', 0, 'R', fill)
      pdf.Cell(w[4], cell_height, short_date(l.end_date).to_s, 'LR', 0, 'R', fill)
      pdf.Cell(w[5], cell_height, short_date(l.returned_date).to_s, 'LR', 0, 'R', fill)
      pdf.Ln()
      fill = (fill == 0 ? 1 : 0)
    end

    pdf.Cell(w.sum, 0, '', 'T')


    # Options to hand over
	if @contract.options.size > 0
        item_table_header = [filter(_("Qt.")), filter(_("Name")), filter(_("Barcode")), filter(_("Start date")), filter(_("End date")), filter(_("Returned date"))]

		pdf.Ln()
		pdf.Cell(40, 10, _("Options:"))
		pdf.Ln()
		
	    pdf.SetFillColor(200, 200, 200)
	    pdf.SetDrawColor(200, 200, 200)
	    pdf.SetLineWidth(0.3)
	    pdf.SetFont('Arial', '', 10)

	    # Table Header for options
        w = [10.0, 65.0, 25.0, 22.0, 22.0, 22.0]
	    0.upto(item_table_header.length - 1) do |i|
	      pdf.Cell(w[i], 7, item_table_header[i], 1, 0, 'C', 1)
	    end
	    pdf.Ln()

		fill = 0

	    @contract.options.each do |o|
	      pdf.Cell(w[0], 6, o.quantity.to_s, 'LR', 0, 'L', fill)
	      pdf.Cell(w[1], 6, o.name, 'LR', 0, 'L', fill)
	      pdf.Cell(w[2], 6, o.barcode, 'LR', 0, 'L', fill)
	      pdf.Cell(w[3], 6, short_date(@contract.time_window_min).to_s, 'LR', 0, 'R', fill)
	      pdf.Cell(w[4], 6, short_date(@contract.time_window_max).to_s, 'LR', 0, 'R', fill)
	      pdf.Cell(w[5], 6, short_date(o.returned_date).to_s, 'LR', 0, 'R', fill)
	      pdf.Ln()
	      fill = (fill == 0 ? 1 : 0)
	    end

	    pdf.Cell(w.sum, 0, '', 'T')
	end


    # Not doing anything yet
    #pdf.Ln()
    #pdf.SetFont('Arial', '', 10)
    #pdf.Write(5, filter(@contract.purpose))
    

%>

<%= pdf.Output() %>
