<%

    require 'iconv'

    # TODO: move to helper
    def filter(text)
      ic = Iconv.new('iso-8859-1//IGNORE//TRANSLIT','utf-8')
      ic.iconv(text)
    end

    def user_address
      @contract.user.name
    end
    
    def lending_address
      CONTRACT_LENDING_PARTY_STRING      
    end

    def maximum_item_price(model)
      maximum = 0
      model.items.each do |i|
        maximum = i.price.to_f if i.price.to_f > maximum
      end
      return maximum
    end

    leftmargin = 25.0
    topmargin = 15.0
    rightmargin = 20.0

    pdf = FPDF.new('Portrait', 'mm', 'A4')
    pdf.SetMargins(leftmargin, topmargin, rightmargin)
    
	pdf.AddPage


    pdf.SetFont('Arial', 'B', 16)
	pdf.Cell(40, 10, filter(_("Value list no. %d")) % @contract.id )
	pdf.Ln()

    # Information about the parties involved in the order
    
    parties_x = pdf.GetX
    parties_y = pdf.GetY

    pdf.SetFont('Arial', 'B', 10)
    pdf.Cell(40, 5, filter(_("Borrowing party:")))

    # Width of the address blocks and distance between one another
    blockwidth = 80
    blockspacing = 10

    # Move below the previous cell
    pdf.SetXY( parties_x, parties_y + 5)

    # Print borowing party
    pdf.SetFont('Arial', '', 10)
    pdf.MultiCell(blockwidth, 5, filter(user_address))

    below_borrower_y = pdf.GetY


    # Put some distance between the parties
    pdf.SetXY(parties_x + blockwidth + blockspacing, parties_y)

    # Print lending party
    pdf.SetFont('Arial', 'B', 10)
    pdf.Cell(40, 5, filter(_("Lending party:")))

    pdf.SetXY( parties_x + blockwidth + blockspacing, parties_y + 5)

    pdf.SetFont('Arial', '', 10)
    pdf.MultiCell(blockwidth, 5, filter(lending_address))
    below_lender_y = pdf.GetY


    pdf.SetY( [below_borrower_y, below_lender_y].max)
    pdf.Ln



    # Colors, line width and bold font
    pdf.SetTextColor(0)
    pdf.SetFillColor(200, 200, 200)
    pdf.SetDrawColor(150, 150, 150)
    pdf.SetLineWidth(0.3)
    pdf.SetFont('Arial', '', 9)

    # Table Header
    # TODO: ugly filters. more elegant way?
    item_table_header = [filter(_("Qt")), filter(_("Model")),  filter(_("Value")), filter(_("Total"))]

    w = [6.0,89.0, 32.0, 32.0]
    0.upto(item_table_header.length - 1) do |i|
      pdf.Cell(w[i], 5, item_table_header[i], 1, 0, 'C', 1)
    end
    pdf.Ln()

    pdf.SetFillColor(224, 235, 255)

    fill = 0

		total_value = 0

    @contract.lines.each do |l|

			if l.class.to_s == "ItemLine"
        model_value = maximum_item_price(l.model) 
				line_value = model_value * l.quantity 
				total_value += line_value
      else
        model_value = _("unknown")
        line_value = _("unknown")
      end

      line_start_x = pdf.GetX
      line_start_y = pdf.GetY

      pdf.SetXY(line_start_x + w[0], line_start_y)

      before_description_x = pdf.GetX
      before_description_y = pdf.GetY

      pdf.MultiCell(w[1], 5, filter(l.model.name), 'LR', 'L', fill)

      after_description_x = before_description_x + w[1]
      after_description_y = pdf.GetY

      cell_height = after_description_y - before_description_y

      pdf.SetXY(line_start_x, line_start_y)
      pdf.Cell(w[0], cell_height, l.quantity.to_s, 'LR', 0, 'R', fill)

      pdf.SetXY(after_description_x, line_start_y)
      pdf.Cell(w[2], cell_height, model_value.to_s, 'LR', 0, 'R', fill)
      pdf.Cell(w[3], cell_height, line_value.to_s, 'LR', 0, 'R', fill)
      pdf.Ln()
      fill = (fill == 0 ? 1 : 0)
    end

    pdf.Cell(w.sum, 0, '', 'T')
		pdf.Ln()
	
    pdf.SetFont('Arial', 'B', 10)
		pdf.Cell(w[0], 5.0, '', 'LR', 0, 'L', 0)
		pdf.Cell(w[1], 5.0, _("Grand total"), 'LR', 0, 'L', 0)
		pdf.Cell(w[2], 5.0, '', 'LR', 0, 'L', 0)
		pdf.Cell(w[3], 5.0, total_value.to_s, 'LR', 0, 'R', 0)
		pdf.Ln()

    pdf.Cell(w.sum, 0, '', 'T')


    pdf.SetFont('Arial', '', 10)

    pdf.Ln(15)
    
%>

<%= pdf.Output() %>
