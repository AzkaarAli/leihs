<% javascript_tag do %>
	function changed_selection(v){
		var visibility = (v == 1 ? "hidden" : "visible");
		$('access_right_inventory_pool_id').style.visibility=visibility;			
		$('level').style.visibility=visibility;
		$('access_level').style.visibility= (v!=4 ? "hidden" : "visible");			
	}
<% end %>

<% form_tag url_for([:add_access_right, :backend, current_inventory_pool, @user].compact), :method => :post do %>
	<table style="width: 400px">
		<tr>
			<th><%= _("Role") %></th>
			<% content_tag :th do %>
				<%= _("Inventory Pool") %>
			<% end unless current_inventory_pool %>
			<th><%= _("Borrow Level") %></th>
			<th><%= _("Access Level") %></th>
			<th></th>
		</tr>
		<tr>
			<% content_tag :td do
        conditions = (current_inventory_pool ? "name != 'admin'" : nil)  %>
				<%= collection_select(:access_right, :role_id, Role.all(:conditions => conditions).sort, :id, :name, {}, {:size => 5, :onchange => "changed_selection(this.value);"}) %>
			<% end %>
			<% content_tag :td do %>
				<%= collection_select(:access_right, :inventory_pool_id, InventoryPool.all.sort, :id, :name, {}, {:size => 5}) %>
			<% end unless current_inventory_pool %>
			<td><%= select_tag :level, options_for_select("1 2 3 4 5 6 7 8 9".split) %> </td>
			<% 	max_levels = (current_inventory_pool ? current_user.access_right_for(current_inventory_pool).access_level : 3)
			   	levels = ""
			   	1.upto(max_levels) { | l | levels = "#{levels} #{l}" }
			 %>
			<td><%= select_tag :access_level, options_for_select(levels.split) %> </td>
			<td><%= submit_tag _('Add') %></td>
			</tr>
	</table>
<% end %>

<br />

<%
access_rights = @user.access_rights
access_rights = access_rights.scoped_by_inventory_pool_id(current_inventory_pool) if current_inventory_pool
table :records => access_rights do |a| %>	

		<tr>
			<td><%= a.to_s %></td>
			<td class="buttons">
				<% remove_link = if current_inventory_pool # OPTIMIZE
									remove_access_right_backend_inventory_pool_user_path(current_inventory_pool, @user, :access_right_id => a)
								 else
									remove_access_right_backend_user_path(@user, :access_right_id => a)
								 end %>
				<%= link_to _('Remove'),
							remove_link,
							:confirm => _("Are you sure?"),
							:method => :delete %>
				<% if current_inventory_pool %>
					<%= link_to(_("Suspend"), suspend_access_right_backend_inventory_pool_user_path(current_inventory_pool, @user, :access_right_id => a), 
								:confirm => _("The user will not be able to place any orders anymore."), :method => :post) unless a.suspended? %>
								
					<%= link_to(icon_tag('emoticon_unhappy') + " " + _('Reinstate'), reinstate_access_right_backend_inventory_pool_user_path(current_inventory_pool, @user, :access_right_id => a), 
								 :method => :post) if a.suspended? %>
				<% end %>
			</td>
		</tr>
<% end %>

<hr />
<h4><%= _("Access levels and borrow levels") %></h4>
<p><%= _("Access levels are used to determine what system functionality a user is allowed to see and use.") %></p>
<p><%= _("Borrow levels are used to allow/disallow lending certain items to users that aren't of high enough level. For example: if an item has level 5, a user of borrow level 4 will never see it whereas a user of level 5 or higher will.") %></p>
<p><%= _("Both levels are handled per inventory pool, so if one inventory pool only wants to deal with levels 1-3 of their items while another needs all 9 levels, this can be done by assigning a maximum of level 3 to a user on the former inventory pool and a maximum level of 9 on the latter. The different levels won't get into each other's way, because one user's borrow level only applies to one single inventory pool, not to all pools.") %></p>
