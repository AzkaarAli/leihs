//////////////////////////////////////////////////////////////////
// Order

	var Line = Ext.data.Record.create([
	   {name: 'order_id', type: 'int'},
	   {name: 'quantity', type: 'int'},
	   {name: 'model.id', type: 'string'},
	   {name: 'model.name', type: 'string'},
	   {name: 'model.manufacturer', type: 'string'},
	   {name: 'model_name', type: 'string', mapping: 'model.name'}, // TODO redundant
	   {name: 'start_date', type: 'date'},
	   {name: 'end_date', type: 'date'},
	   {name: 'available?', type: 'string'},
	   {name: 'available_tooltip', type: 'string'},
	   {name: 'inventory_pool.name', type: 'string'},
	   {name: 'inventory_pool.closed_days'},
	   {name: 'inventory_pool.closed_dates'}
	]);

    // create the Data Store
    var complete_order_store = new Ext.data.GroupingStore({
        proxy: new Ext.data.HttpProxy(
			new Ext.data.Connection({
            	url: '/user/order.ext_json',
				method: 'GET'
			})
        ),
        reader: new Ext.data.JsonReader({ // create reader that reads the Topic records
            root: 'order_lines',
            totalProperty: 'results',
            id: 'id'},
			Line),
		listeners: {
			load: function(){
				if(center_tabs.activeTab == order) toggle_submit_button();
			}
		},
		//autoLoad: true,
		groupField: 'inventory_pool.name', //'start_date',
        sortInfo:{field: 'model', direction: "ASC"},
        remoteSort: true // turn on remote sorting
    });

//////////////////////////////////////////////////////////////////
// Order Guide

	var order_guide = new Ext.Panel({
		title: " ", // NOTE title has to be present (not empty string)
	    layout:'anchor',
	    autoScroll:true,
		frame: true,
		region: 'north',
		height: 70,
	    items: [
			new Ext.DataView({
				store: complete_order_store,
				itemSelector: '.order_line',
				tpl: new Ext.XTemplate('<tpl for=".">', '<div class="order_line"><tpl if="available_tooltip">- {model_name}: {available_tooltip}</tpl></div>', '</tpl>')
	    	})
		]
	});

//////////////////////////////////////////////////////////////////

	
	var complete_order_sm = new Ext.grid.CheckboxSelectionModel({
									listeners: {
										selectionchange: function(cmp){
											var b = !(complete_order_sm.getCount() > 0);
											Ext.getCmp('bt_change_timeframe').setDisabled(b);
											Ext.getCmp('bt_remove').setDisabled(b);
										}	
									}
								});
	
    // the column model has information about grid columns
    // dataIndex maps the column to the specific data field in
    // the data store
    var complete_order_cm = new Ext.grid.ColumnModel([complete_order_sm,
		{
           header: "",
           dataIndex: 'quantity',
           width: 10,
           align: 'right',
// 		   renderer:function(value,p,r){ return (r.data['available?'] == 'true')? value:'<div style="background-color: red;">'+ value +'</div>';},
// 		   renderer:function(value,p,r){ return '<div class="x-small-editor"><input type="text" value="'+ value +'" class="x-form-text x-form-field x-form-focus" style="width: 64px;"></div>';},
 		   renderer:function(value,p,r){ return '<div class="x-form-text x-form-field">'+value+'</div>';},
		   editor: new Ext.form.TextField({
               allowBlank: false
           })
        },{
           header: "Model",
           dataIndex: 'model.name'
        },{
           header: "Inventory Pool",
           dataIndex: 'inventory_pool.name',
           width: 50
        },{
           header: "Start date",
           dataIndex: 'start_date',
           width: 50,
           renderer: formatDate,
           editor: new Ext.form.DateField({
				//, disabledDays: function() { var n = new Array();
				//							console.log(complete_order_store.reader);
				//							//n.push(complete_order_store.reader.jsonData['inventory_pool.closed_days']);
				//							return n;
				//	},
				//disabledDates: ["10/30/08"]
            })
        },{
           header: "End date",
           dataIndex: 'end_date',
           width: 50,
           renderer: formatDate,
           editor: new Ext.form.DateField({})
        },{
           header: "Available",
           dataIndex: 'available?',
           width: 40,
		   align: 'center',
		// css: "background-color: red;",
// 		   renderer:function(value,p,r){ return (r.data['available?'] == 'true')? value:'<div style="background-color: red;">'+ value +'</div>';},
 		   renderer:function(value,p,r){ var img = (value == 'true')?'accept':'exclamation';
		   								 var qtip = (r.data['available?'] == 'true') ? '' : 'ext:qtip="' + r.data['available_tooltip'] +'"'; 
		   							 	 return '<img ' + qtip + ' src="<%= $layout_public_path %>/images/icons/' + img + '.png" />';}
        },{
			header: "",
			dataIndex: '',
			width: 20,
			renderer: function(){ return '<img src="<%= $layout_public_path + "/images/icons/bin_closed.png" %>" style="cursor: pointer;" />';}
        }]);

    // by default columns are sortable
    complete_order_cm.defaultSortable = true;

    var complete_order = new Ext.grid.EditorGridPanel({
    	id: 'complete_order',
		region: 'center',
        store: complete_order_store,
        cm: complete_order_cm,
		sm: complete_order_sm,
        loadMask: true,
		clicksToEdit: 1,
		view: new Ext.grid.GroupingView({
            forceFit:true,
            groupTextTpl: '{text}'
        }),
		listeners: {
			cellclick: function( grid, rowIndex, columnIndex, e ){
				if (columnIndex == 2) {
					model_id = grid.getStore().getAt(rowIndex).data['model.id'];
					add_model_details(model_id);
				}else if (columnIndex == 4 || columnIndex == 5) {
						var field = grid.getColumnModel().getCellEditor(columnIndex, rowIndex).field;
						field.setDisabledDays(grid.getStore().getAt(rowIndex).data['inventory_pool.closed_days']);
						field.setDisabledDates(grid.getStore().getAt(rowIndex).data['inventory_pool.closed_dates']); // TODO: Maybe works with new ext.js
						//field.menu.picker.setDisabledDates(grid.getStore().getAt(rowIndex).data['inventory_pool.closed_dates']);
				}else if (columnIndex == 7){
					x_id = grid.getStore().getAt(rowIndex).id;
					Ext.Ajax.request({
						method: 'POST',
					    url: '/user/order/remove_lines',
						params: {"lines": x_id,
								 '<%= request_forgery_protection_token %>': '<%= form_authenticity_token %>'},
	                    success: function(r) {
						    complete_order_store.load();
	                    }
					});
				}
			},
			afteredit: function(e){
				if(e.field == "start_date" || e.field == "end_date"){
					if(e.record.data.end_date < e.record.data.start_date){
						Ext.Msg.alert('<%= _("Error") %>', '<%= _("Start Date must be before End Date") %>');
						return false;
					}
				    u = '/user/order/change_time_lines';
				    p = {"lines": [e.record.id],
						 "start_date": e.record.data.start_date.dateFormat('d.m.Y'),
						 "end_date": e.record.data.end_date.dateFormat('d.m.Y'),
						 '<%= request_forgery_protection_token %>': '<%= form_authenticity_token %>'};
				}else if(e.field == "quantity"){
				    u = '/user/order/change_line';
				    p = {"order_line_id": e.record.id,
						 "quantity": e.value,
						 '<%= request_forgery_protection_token %>': '<%= form_authenticity_token %>'};
				}
				Ext.Ajax.request({
 					method: 'POST',
				    url: u,
				    params: p,
				    success: function(responseObject) {
					    complete_order_store.load();
				    },
					failure: function(responseObject) {
						Ext.Msg.alert('Error', responseObject.responseText);
					}
				});
			}
		},
		tbar:[{
				id: 'bt_change_timeframe',
	            text: '<%= _("Change Timeframe") %>',
	            tooltip: '<%= _("Change the timeframe for the selected items") %>',
				iconCls:'bt',
	            icon:'<%= $layout_public_path + "/images/icons/date_edit.png" %>',
				disabled: true,
				handler: function(){ show_change_timeframe(); }
	        },'-',{
				id: 'bt_remove',
	            text: '<%= _("Remove") %>',
	            tooltip: '<%= _("Remove the selected items") %>',
				iconCls:'bt',
	            icon:'<%= $layout_public_path + "/images/icons/delete.png" %>',
				disabled: true,
				handler: function(){
					Ext.Msg.show({
					   title: '<%= _("Remove") %>',
					   msg: '<%= _("You are sure?") %>',
   			           width:300,
					   buttons: Ext.Msg.YESNO,
					   animEl: this.id,
					   icon: Ext.MessageBox.QUESTION,
			           fn: function (btn, text){
							if(btn == "yes"){
				                Ext.Ajax.request({
									method: 'POST',
								    url: '/user/order/remove_lines',
									params: {"lines": selected_lines(),
											 '<%= request_forgery_protection_token %>': '<%= form_authenticity_token %>'},
				                    success: function(r) {
									    complete_order_store.load();
				                    }
				                });					
							}
					   }
					});
				}
	        }, '->', {
					id: 'bt_submit',
			        text: '<%= _("Submit Order") %>',
					iconCls:'bt',
		            icon:'<%= $layout_public_path + "/images/icons/tab_go.png" %>',
			        handler: function(){
			            var purpose_win = new Ext.Window({
								xtype: 'form',
								layout: 'form',
								title: '<%= _("Do you want to submit this order?") %>',
								width: 600,
								height: 200,
								bodyStyle: 'padding:15px',
								items: {
									xtype: 'textarea',
									fieldLabel: '<%= _("Purpose") %>',
									name: 'purpose',
									allowBlank: false,
									anchor: '90%'
								},
								buttons: [{
									text: '<%= _("Submit") %>',
									type: 'submit',
									// disabled : true,
									handler: function(){
										var b = true;
										var parameters = new Hash({"id": complete_order_store.reader.jsonData['id'],
																  '<%= request_forgery_protection_token %>': '<%= form_authenticity_token %>'});
										purpose_win.items.items._each(function(item){
											b = b && item.validate();
											parameters.set(item.name, item.getValue());
										});
										if (b) {
											order.layout.setActiveItem(1);
											order.layout.activeItem.load({
												url: '/user/order/submit',
												method: 'POST',
												params: parameters.toObject()
											});
											purpose_win.hide();
										}
									}
								}]
							});
						purpose_win.show();

			       }
			}]
    });


 
  	function selected_lines(){
		var selected = complete_order_sm.getSelections();
		var lines = "";
		
		for(var i = 0; i < selected.length; i++){
			if(lines != "") lines += ","; 
			lines += selected[i].id;
		}
		return lines;
	}

	function get_selected_min_start_date(){
		var selected = complete_order_sm.getSelections();
		var min = selected[0].data.start_date;
		
		for(var i = 1; i < selected.length; i++){
			if(selected[i].data.start_date < min)
				min = selected[i].data.start_date;
		}
		return min;		
	}

	function get_selected_max_end_date(){
		var selected = complete_order_sm.getSelections();
		var max = selected[0].data.end_date;
		
		for(var i = 1; i < selected.length; i++){
			if(selected[i].data.end_date > max)
				max = selected[i].data.end_date;
		}
		return max;		
	}

	function show_change_timeframe(){
		    var timeframe_form = new Ext.form.FormPanel({
		        labelAlign: 'top',
				buttonAlign: 'right',
				region: 'center',
		        frame:true,
		        items: [{
		            layout:'column',
		            items:[{
		                columnWidth:.5,
		                layout: 'form',
		                items: start_date = {
		                    xtype:'datefield',
		                    fieldLabel: '<%= _("Start date") %>',
		                    name: 'start_date',
							value: get_selected_min_start_date(),
							//minValue: new Date(),
							disabledDays: [6,0],
		                    anchor:'90%'
		                }
		            },{
		                columnWidth:.5,
		                layout: 'form',
		                items: {
		                    xtype:'datefield',
		                    fieldLabel: '<%= _("End date") %>',
		                    name: 'end_date',
							value: get_selected_max_end_date(),
							//minValue: new Date(),
							disabledDays: [6,0],
		                    anchor:'90%'
		                }
		            }]
		        }],		
		        buttons: [{
		            text: '<%= _("Change") %>',
					type: 'submit',
					handler: function() {
						Ext.Ajax.request({
		 					method: 'POST',
						    url: '/user/order/change_time_lines',
						    params: {"lines": selected_lines(),
									 "start_date": timeframe_form.form.findField('start_date').getValue().dateFormat('d.m.Y'),
									 "end_date": timeframe_form.form.findField('end_date').getValue().dateFormat('d.m.Y'),
									 '<%= request_forgery_protection_token %>': '<%= form_authenticity_token %>'},
						    success: function(responseObject) {
							    complete_order_store.load();
								timeframe_win.hide();
						    },
							failure: function(responseObject) {
								Ext.Msg.alert('Error', responseObject.responseText);
							}
						});
					}
			    }]
		    });


			var timeframe_win = new Ext.Window({
	            title    : '<%= _("Change Timeframe") %>',
	            //closable : true,
				closeAction:'hide',
	            width    : 500,
	            height   : 200,
	            //border : false,
	            plain    : true,
	            layout   : 'border',
	            items    : [timeframe_form]
	        });
			timeframe_win.show();
				   
		}		


///////////////////////////////////////////////////////////////////////////

       var order = new Ext.Panel({
			id: 'order',
            layout:'card',
			activeItem: 0,
	        title: '<%= _("Order") %>',
            items:[{
					xtype: 'panel',
					layout: 'border',
					border: false,
					items: [order_guide, complete_order]
	            },{
					xtype: 'panel',
				    autoScroll:true,
					frame: true,
				    tbar: [
				        '->',
				        {
							//id: 'bt_new_order',
				            text: 'New Order',
							iconCls:'icon-add',
							//iconCls:'bt',
				            //icon:'<%= $layout_public_path + "/images/icons/tab_go.png" %>',
				            handler: function(){
								complete_order_store.load();
								order.layout.setActiveItem(0);
								models_grid.show();
							}
				        }
				    ]
	            }],
			listeners: {
				activate: function(cmp) {
					toggle_submit_button();
					model_details.collapse();
//					complete_order_store.load();
					basket.disable();
				},
				deactivate: function(cmp) {
					basket.enable();
				}				
			}			
        });

	function toggle_submit_button(){
		var a = (complete_order_store.data.length > 0);
		var b = complete_order_store.reader.jsonData['approvable?']; // OPTIMIZE
		var c = !(a && b);
		var t = " "; // NOTE title has to be present (not empty string)

		if(!a){
			t = '<%= _("The order is empty") %>';
		}else if(!b){
			t = '<%= _("The order is not yet approvable") %>';
		}
		order_guide.setTitle(t);		

		Ext.getCmp('bt_submit').setDisabled(c);
	}
