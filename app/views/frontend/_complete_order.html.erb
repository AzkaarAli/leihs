	var Line = Ext.data.Record.create([
	   {name: 'order_id', type: 'int'},
	   {name: 'quantity', type: 'int'},
	   {name: 'model.name', type: 'string'},
	   {name: 'start_date', type: 'date'},
	   {name: 'end_date', type: 'date'},
	   {name: 'available?', type: 'string'},
	   {name: 'inventory_pool.name', type: 'string'}
	]);

    // create the Data Store
    var complete_order_store = new Ext.data.GroupingStore({ //old Store
        proxy: new Ext.data.HttpProxy(
			new Ext.data.Connection({
            	url: '/orders/show',
				method: 'GET',
				extraParams: {format:'ext_json'}
			})
        ),

        // create reader that reads the Topic records
        reader: new Ext.data.JsonReader({
            root: 'order_lines',
            totalProperty: 'results',
            id: 'id'},
			Line),

		groupField: 'start_date',
        sortInfo:{field: 'model', direction: "ASC"},

        // turn on remote sorting
        remoteSort: true
    });

    function formatDate(value){
        return value ? value.dateFormat('d/m/y') : '';
    };
	
	var complete_order_sm = new Ext.grid.CheckboxSelectionModel();
	
    // the column model has information about grid columns
    // dataIndex maps the column to the specific data field in
    // the data store
    var complete_order_cm = new Ext.grid.ColumnModel([complete_order_sm,
		{
           header: "",
           dataIndex: 'quantity',
           width: 25,
           align: 'right',
 		   renderer:function(value,p,r){ return (r.data['available?'] == 'true')? value:'<div style="background-color: red;">'+ value +'</div>';},
		   editor: new Ext.form.TextField({ // TODO fix rendering problem
               allowBlank: false
           })
        },{
           header: "Model",
           dataIndex: 'model.name',
           width: 250
        },{
           header: "Inventory Pool",
           dataIndex: 'inventory_pool.name',
           width: 100
        },{
           header: "Start date",
           dataIndex: 'start_date',
           width: 100,
           renderer: formatDate,
           editor: new Ext.form.DateField({
                format: 'd/m/y' //,
				//renderer: new Ext.DatePicker({startDay: 1})
            })
        },{
           header: "End date",
           dataIndex: 'end_date',
           width: 100,
           renderer: formatDate,
           editor: new Ext.form.DateField({
                format: 'd/m/y' //,
				//renderer: new Ext.DatePicker({startDay: 1})
            })
        },{
           header: "Available",
           dataIndex: 'available?',
		   align: 'center',
		// css: "background-color: red;",
 		   renderer:function(value){ var img = (value == 'true')?'accept':'exclamation';
		   							 return '<img src="<%= $layout_public_path %>/images/icons/' + img + '.png" />';},
           width: 40
        }]);

    // by default columns are sortable
    complete_order_cm.defaultSortable = true;

    var complete_order = new Ext.grid.EditorGridPanel({ //old: GridPanel
//        el:'complete_order',
    	id: 'complete_order',
        title:'Order',
        store: complete_order_store,
        cm: complete_order_cm,
		sm: complete_order_sm,
		viewConfig: { forceFit: true },
        loadMask: true,
		clicksToEdit: 1,
		view: new Ext.grid.GroupingView({
            forceFit:true,
            groupTextTpl: '{text}'
        }),
		listeners: {
			activate: function(cmp) {
				this.store.load();
				basket.disable();
			},
			deactivate: function(cmp) {
				basket.enable();
			},
			afteredit: function(e){
				if(e.field == "start_date" || e.field == "end_date"){
				    u = '/orders/change_time_lines';
				    p = {"order_line_id": e.record.id, "start_date": e.record.data.start_date.dateFormat('Y-m-d'), "end_date": e.record.data.end_date.dateFormat('Y-m-d')};					
				}else if(e.field == "quantity"){
				    u = '/orders/change_line';
				    p = {"order_line_id": e.record.id, "quantity": e.value};
				}
				Ext.Ajax.request({
 					method: 'GET',
				    url: u,
				    params: p,
				    success: function(responseObject) {
					    complete_order_store.load();
				    },
					failure: function(responseObject) {
						Ext.Msg.alert('Error', responseObject.responseText);
					}
				});
			}
		},
		tbar:[{
				id: 'bt_change_timeframe',
	            text:'Change Timeframe',
	            tooltip:'Change the timeframe for the selected items',
				iconCls:'bt',
	            icon:'<%= $layout_public_path + "/images/icons/date_edit.png" %>',
				handler: function(){
					Ext.MessageBox.show({
			           title: 'Change Timeframe',
			           msg: 'TODO display 2 calendars:',
			           width:300,
			           buttons: Ext.MessageBox.OKCANCEL,
			           multiline: true,
			           fn: function (btn, text){
							if(btn == "ok"){
								var lines = selected_lines();
								
							}
					   },
			           animEl: this.id
			       });
				}
	        },'-',{
	            text:'Remove',
	            tooltip:'Remove the selected items',
				iconCls:'bt',
	            icon:'<%= $layout_public_path + "/images/icons/delete.png" %>',
				handler: function(){
					var lines = selected_lines();
	                Ext.Ajax.request({
						method: 'GET',
					    url: '/orders/remove_lines',
						params: {"lines": lines},
	                    success: function(r) {
						    complete_order_store.load();
	                    }
	                });					
				}
	        }],
        bbar: [
			new Ext.Action({
				id: 'bt_submit',
		        text: 'Submit Order',
				iconCls:'bt',
	            icon:'<%= $layout_public_path + "/images/icons/tab_go.png" %>',
		        handler: function(){
					//submitPopup.show();
					Ext.MessageBox.show({
			           title: '<%= _("Do you want to submit this order?") %>',
			           msg: '<%= _("Purpose") %>',
			           width:300,
			           buttons: Ext.MessageBox.OKCANCEL,
			           multiline: true,
			           fn: function (btn, text){
							if(btn == "ok"){
								complete_order.disable();
				                Ext.Ajax.request({
								    url: '/orders/submit',
									method: 'POST',
				                    //params: {"id": complete_order_store.id}, // TODO protect_from_forgery
									params: {"id": complete_order_store.data.items[0].data.order_id, // TODO collect order.id from json
											<%= "'#{request_forgery_protection_token}': '#{form_authenticity_token}'" %>},
									success: function(r) {
										//w.items.items[0].body.dom.innerHTML = r.responseText;
										//Ext.Msg.alert(r.responseText);
										window.location.href = '/';
				                    }
				                });
							}
					   },
			           animEl: this.id
			       });
		        }
		    })
        ]
    });

	//complete_order.render();
	
    // trigger the data store load
    //complete_order_store.load();
/*
    var submitPopup = new Ext.Window({
        title: 'Submit',
        width: 920,
        height: 500,
        shim: false,
        closeAction: 'hide',
		modal: true,
//        bodyCfg: {tag: 'textarea', readonly: true},
        bodyStyle: {
            backgroundColor: 'white',
            margin: '0px',
            border: '0px none'
        },
		items: {
		    xtype: 'panel'
		},
        listeners: {
            render: function(w) {
                Ext.Ajax.request({
					method: 'GET',
				    url: '/orders/submit',
					params: {"id": complete_order_store.data.items[0].data.order_id}, // TODO collect order.id from json
                    //params: {"id": complete_order_store.id},
                    success: function(r) {
						w.items.items[0].body.dom.innerHTML = r.responseText;
                    }
                });
            }
        }
    });
 */
 
  	function selected_lines(){
		var selected = complete_order_sm.getSelections();
		var lines = "";
		
		for(var i = 0; i < selected.length; i++){
			if(lines != "") lines += ","; 
			lines += selected[i].id;
		}
		return lines;
	}

  