
    // create reader that reads the Topic records
	var model_reader = new Ext.data.JsonReader({
		        root: 'models',
		        totalProperty: 'results',
		        id: 'id',
		        fields: [
					   {name: 'name', type: 'string'},
					   {name: 'manufacturer', type: 'string'},
					   {name: 'description', type: 'string'},
					   {name: 'properties'},
					   {name: 'inventory_pools'},
					   {name: 'compatibles'},
					   {name: 'accessories'},
					   {name: 'images'},
					   {name: 'is_package', type: 'boolean'},
					   {name: 'package_items'},
   					   {name: 'chart', type: 'string'},
		        ]
		    });

    // create the Data Store
    var models_store = new Ext.data.Store({
        proxy: new Ext.data.HttpProxy(
			new Ext.data.Connection({
            	url: '/models.ext_json',
				method: 'GET'
			})
        ),
        reader: model_reader,
		listeners: {
			beforeload: function(store, options){
				if(store.lastOptions && store.lastOptions.params.category_id && !options.params.category_id){
					options.params.category_id = store.lastOptions.params.category_id;
				}
			},
			load: function(store, options){
				models_tbar_label.setText(categories_panel.selModel.selNode ? categories_panel.selModel.selNode.text : 'All');
			}
	 	},
        remoteSort: true // turn on remote sorting
    });
    models_store.setDefaultSort('name', 'ASC');

    // the column model has information about grid columns
    // dataIndex maps the column to the specific data field in
    // the data store
    var models_cm = new Ext.grid.ColumnModel([
		{
           header: "Name",
           dataIndex: 'name',
           width: 400
        },{
           header: "Manufacturer",
           dataIndex: 'manufacturer',
           width: 200,
 		   renderer: function(value, metadata, record){
		   				return (record.data.is_package ? '<img src="<%= $layout_public_path + "/images/icons/package_green.png" %>" />' : value);
					 }
        },{
           header: "Inventory Pool",
           dataIndex: 'inventory_pools',
           width: 100,
		   sortable: false,
		   menuDisabled: true,
 		   renderer: function(value){
		   				var n = new Array();
		   				for( i=0; i<value.length; i++ )
							n.push(value[i].name)
						return n.join(", ");
					 }
        }, {header: "",
			width: 50,
			fixed: true,
			dataIndex: '',
			align: 'center',
			renderer: function(){ return '<img src="<%= $layout_public_path + "/images/icons/add.png" %>" style="cursor: pointer;" />';}
		}]);

    // by default columns are sortable
    models_cm.defaultSortable = true;

	var models_search_field = new Ext.app.SearchField({
					                store: models_store,
					                width: 320
					            });

    var models_grid = new Ext.grid.GridPanel({
        title: '<%= _("Models") %>',
		split: true,
		region: 'north',
        store: models_store,
        cm: models_cm,
		enableColumnHide: false,
		enableColumnMove: false,
		viewConfig: { forceFit: true },
        loadMask: true,
		listeners: {
//			activate: function(cmp) {
//				if(models_store.getCount() == 0) models_store.load(); //({params:{start:0, limit:25}});
//			},
			cellclick: function( grid, rowIndex, columnIndex, e ){
			  model_id = grid.getStore().getAt(rowIndex).id;
			  add_tab = (columnIndex == grid.colModel.config.length - 1);
			  model_tab = add_model_details(model_id, add_tab);
			}
		},
        tbar: [
            '<%= _("Search") %>: ',
			models_search_field,
            ' <%= _("Category") %>: ',
			models_tbar_label= new Ext.form.Label({ text: '<%= _("All") %>' })
        ],
		bbar: new Ext.PagingToolbar({
            pageSize: 25,
            store: models_store,
            displayInfo: true,
            displayMsg: 'Displaying models {0} - {1} of {2}',
            emptyMsg: '<%= _("No models to display") %>'
        })
    });


    // trigger the data store load
    models_store.load({params:{start:0, limit:25}});


///////////////////////////////////////////////////////////////////////////
// Model Details
////////////////
		var model_details = new Ext.TabPanel({
			region: 'south',
			collapsible: true,
			collapsed: true,
			split: true,
			resizeTabs: true,
			border: false,
			tabWidth: 300,
			height: 290 //, // 'auto'
		});

		var model_store = new Array(); // TODO 05** provide a better data structure
		var model_store_compatibles = new Array();
		var model_store_ips = new Array();

		Ext.QuickTips.init();	
	    Ext.form.Field.prototype.msgTarget = 'side';

function add_model_details(model_id, add_tab){
	if (add_tab == null) add_tab = false;
 
	model_tab = model_details.getComponent(model_id);
	if (model_tab) {
	  	if(add_tab) model_tab.activate(model_tab.items.length - 1);		
	}else{
	
		model_store[model_id] = new Ext.data.Store({
			proxy: new Ext.data.HttpProxy(new Ext.data.Connection({
				url: '/models/' + model_id + '.ext_json',
				method: 'GET'
			})),
			reader: model_reader,
			listeners: {
				datachanged: function(){
					model_tab.setTitle(this.data.items[0].data.name);
					var modelData = this.reader.jsonData['models'][0];
					model_store_compatibles[model_id].loadData(modelData);
					model_store_ips[model_id].loadData(modelData);

				  	if(add_tab) model_tab.activate(model_tab.items.length - 1);
				}
		 	}
		});
		
		model_store_compatibles[model_id] = new Ext.data.Store({
			reader: new Ext.data.JsonReader({
				root: 'compatibles',
				totalProperty: 'results',
				id: 'id',
				fields: [{
					name: 'name',
					type: 'string'
				}, {
					name: 'manufacturer',
					type: 'string'
				}]
			})
		});
		
		model_store_ips[model_id] = new Ext.data.JsonStore({
			root: 'inventory_pools',
			id: 'id',
			fields: [{
				name: 'id',
				type: 'int'
			}, {
				name: 'name',
				type: 'string'
			}, {
				name: 'items_size',
				type: 'int'
			}, {
				name: 'name_and_items_size', // TODO 01** provide name_and_items_size directly in extjs
				type: 'string'
			}]
		});
		
		var model_tab = new Ext.TabPanel({
			id: model_id,
			title: ' ', //model_id,
			iconCls:'icon-model',
			autoScroll: true,
			activeTab: 0,
			closable: true,
			defaults: {
				store: model_store[model_id]
			},
			items: [{
				xtype: 'dataview',
				title: '<%= _("Details") %>',
				loadingText: '<%= _("Loading") %>...',
                tpl: new Ext.XTemplate('<tpl for=".">', 
										 '<div class="model_images" style="float: right;"><tpl for="images">', '<img src="{public_filename_thumb}">', '</tpl>', '</div>',                
                                         '<div class="model_description">',
                                         '<h2>{name} ({manufacturer})</h2>',
                                         '<p>{description}</p>',
                                         '<p><img src="{chart}"></p>',
                                        
											'<tpl if="package_items.length">',
												'<br />Package: <ul><tpl for="package_items">',
							            			'<li>{inventory_code}, <tpl for="model">{name}, {manufacturer}</tpl></li>',
								        		'</tpl></ul>',
							        		'</tpl>',
                                        '</div>',
										'</tpl>')
			}, {
				xtype: 'dataview',
				title: '<%= _("Properties") %>',
				itemSelector: 'div.model_property',
				tpl: new Ext.XTemplate('<tpl for=".">', '<tpl for="properties">', '<div class="model_property">{key}: {value}</div>', '</tpl>', '</tpl>')
			}, {
				xtype: 'dataview',
				title: '<%= _("Accessories") %>',
				itemSelector: 'div.model_accessory',
                tpl: new Ext.XTemplate('<tpl for=".">', '<ul class="accessories">', '<tpl for="accessories">', '<li class="model_accessory">{name}</li>',  '</tpl>', '</ul>', '</tpl>')
			}, {
				xtype: 'grid',
				listeners: {
/*					activate: function(){ // TODO optimize, avoid reload every time
						this.store.loadData(model_store[model_id].reader.jsonData['models'][0]);
					}, // this.render(); */
					rowclick: function(grid, rowIndex, e){
						model_id = grid.getStore().getAt(rowIndex).id;
						add_model_details(model_id);
					}
				},
				title: '<%= _("Compatibles") %>',
				viewConfig: { forceFit: true },
				loadMask: true,
				autoscroll: true,
				store: model_store_compatibles[model_id],
				cm: new Ext.grid.ColumnModel([{
					header: '<%= _("Name") %>',
					dataIndex: 'name',
					width: 400
				}, {
					header: '<%= _("Manufacturer") %>',
					dataIndex: 'manufacturer',
					width: 200
				}])
			}, {
				xtype: 'form',
				title: '<%= _("Add") %>',
				iconCls:'icon-add',
				listeners: {
					activate: function(){
						//model_store_ips[model_id].loadData(model_store[model_id].reader.jsonData['models'][0]);
						this.doLayout();
					}
				},
/// start form						
				labelAlign: 'top',
				buttonAlign: 'right',
				frame: true,
				items: [{
					layout: 'column',
					items: [{
						columnWidth: .1,
						layout: 'form',
						items: [{
							xtype: 'numberfield',
							fieldLabel: '<%= _("Quantity") %>',
							name: 'quantity',
							value: '1',
							anchor: '70%'
						},{
							xtype: 'hidden',
							name: 'model_id',
							value: model_id
						}]
					}, {
						columnWidth: .2,
						layout: 'form',
						items: {
							xtype: 'combo',
							fieldLabel: '<%= _("Inventory Pool") %>',
							name: 'inventory_pool',
							mode: 'local',
							triggerAction: 'all',
							store: model_store_ips[model_id],
							allowBlank: false,
							displayField: "name_and_items_size",
							valueField: "id",
							hiddenName: 'inventory_pool_id',
							editable: false,
							anchor: '90%',
							listeners: {
								render: function(combo){ if(combo.store.data.items[0]) combo.setValue(combo.store.data.items[0].id); } // OPTIMIZE 08** select last selected inventory_pool 
							}
						}
					}, {
						columnWidth: .2,
						layout: 'form',
						items: {
							xtype: 'datefield',
							fieldLabel: '<%= _("Start date") %>',
							id: 'start_date_' + model_id,
							name: 'start_date',
							value: new Date(),
							//minValue: new Date(),
							disabledDays: [6, 0],
							listeners: {
								valid: function(){
									this.findParentByType('form').findById('end_date_' + model_id).validate();
								}
							},
							anchor: '90%'
						}
					}, {
						columnWidth: .2,
						layout: 'form',
						items: {
							xtype: 'datefield',
							fieldLabel: '<%= _("End date") %>',
							id: 'end_date_' + model_id,
							name: 'end_date',
							value: new Date(),
							//minValue: new Date(),
							disabledDays: [6, 0],
							validator: function(){
								var start_date = this.findParentByType('form').findById('start_date_' + model_id).getValue();
								var end_date = this.getValue();
								if (end_date < start_date){
									return '<%= _("Start Date must be before End Date") %>';
								}else{
									return true;
								}
							},
							anchor: '90%'
						}
					}, {
						columnWidth: .1,
						items: new Ext.Button({
							text: '<%= _("Add") %>',
							type: 'submit',
							iconCls: 'bt',
							icon: '<%= $layout_public_path + "/images/icons/add.png" %>',
							handler: function(){
								this.findParentByType('form').form.submit({
									waitMsg: '<%= _("Saving Data") %>...',
									url: '/user/order/add_line',
									method: 'POST',
									params: {
										'<%= request_forgery_protection_token %>': '<%= form_authenticity_token %>'
									},
									success: function(responseObject){
										complete_order_store.load();
									},
									failure: function(responseObject){
										Ext.Msg.alert('Error', responseObject.responseText);
									}
								});
							}
						})
					}]
				}
				]
			/// end form						
			}]
		});

		model_store[model_id].load();

		model_details.add(model_tab);
	}	
	model_details.expand();
	model_details.activate(model_tab);
	model_details.doLayout();

	return model_tab;
} // end function
