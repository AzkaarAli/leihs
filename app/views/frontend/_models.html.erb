
    // create reader that reads the Topic records
	var model_reader = new Ext.data.JsonReader({
		        root: 'models',
		        totalProperty: 'results',
		        id: 'id',
		        fields: [
					   {name: 'name', type: 'string'},
					   {name: 'manufacturer', type: 'string'},
					   {name: 'properties'},
					   {name: 'inventory_pools'},
					   {name: 'compatibles'},
					   {name: 'accessories'},
					   {name: 'images'}
		        ]
		    });

    // create the Data Store
    var models_store = new Ext.data.Store({
        proxy: new Ext.data.HttpProxy(
			new Ext.data.Connection({
            	url: '/models',
				method: 'GET',
				extraParams: {format:'ext_json'}
			})
        ),
        reader: model_reader,
        // turn on remote sorting
        remoteSort: true
    });
    models_store.setDefaultSort('name', 'ASC');

    // the column model has information about grid columns
    // dataIndex maps the column to the specific data field in
    // the data store
    var models_cm = new Ext.grid.ColumnModel([
		{
           header: "Name",
           dataIndex: 'name',
           width: 400
        },{
           header: "Manufacturer",
           dataIndex: 'manufacturer',
           width: 200
        },{
           header: "Inventory Pool",
           dataIndex: 'inventory_pools',
           width: 100,
 		   renderer: function(value){
		   				var n = new Array();
		   				for( i=0; i<value.length; i++ )
							n.push(value[i].name)
						return n.join(", ");
					 }
		}]);

    // by default columns are sortable
    models_cm.defaultSortable = true;

    var models_grid = new Ext.grid.GridPanel({
        title:'Models',
		split: true,
		region: 'north',
        store: models_store,
        cm: models_cm,
		viewConfig: { forceFit: true },
        loadMask: true,
		listeners: {
			rowclick: function( grid, rowIndex, e ){
			  model_id = grid.getStore().getAt(rowIndex).id;
			  add_model_details(model_id);
			}
		},
        tbar: [
            'Search: ', ' ',
            new Ext.app.SearchField({
                store: models_store,
                width: 320
            })
        ],
		bbar: new Ext.PagingToolbar({
            pageSize: 25,
            store: models_store,
            displayInfo: true,
            displayMsg: 'Displaying topics {0} - {1} of {2}',
            emptyMsg: "No topics to display"
        })
    });


    // trigger the data store load
    models_store.load({params:{start:0, limit:25}});


///////////////////////////////////////////////////////////////////////////
// Model Details
////////////////
		var model_details = new Ext.TabPanel({
			region: 'south',
//			title: 'Model',
			collapsible: true,
			collapsed: true,
			split: true,
//			autoHeight: true,
			height: 290 //, // 'auto'
//			autoScroll: true,
//			items: { id: 'model_details' }
//			activeTab: 0
		});

		var model_store = new Array();
		var model_store_compatibles = new Array();
		var model_store_ips = new Array();

		Ext.QuickTips.init();	
	    Ext.form.Field.prototype.msgTarget = 'side';

function add_model_details(model_id){

	model_tab = model_details.getComponent(model_id);
	if (!model_tab) {
	
		model_store[model_id] = new Ext.data.Store({
			proxy: new Ext.data.HttpProxy(new Ext.data.Connection({
				url: '/models/' + model_id + '/details', // invoke with params: {model_id: model_id},
				method: 'GET',
				extraParams: {
					format: 'ext_json'
				}
			})),
			reader: model_reader,
			listeners: { datachanged: function(){
				/*
				 	model_details.expand();
					//model_details.remove(0);
				 	model_details.add(add_details(this.data.items[0].data.name));
			 		model_details.doLayout();
			 	*/
				model_tab.setTitle(this.data.items[0].data.name);
				model_store_compatibles[model_id].loadData(this.reader.jsonData['models'][0]);
				model_store_ips[model_id].loadData(this.reader.jsonData['models'][0]);
				 }
		 	}
		});
		
		model_store_compatibles[model_id] = new Ext.data.Store({
			reader: new Ext.data.JsonReader({
				root: 'compatibles',
				totalProperty: 'results',
				id: 'id',
				fields: [{
					name: 'name',
					type: 'string'
				}, {
					name: 'manufacturer',
					type: 'string'
				}]
			})
		});
		
		model_store_ips[model_id] = new Ext.data.JsonStore({
			root: 'inventory_pools',
			id: 'id',
			fields: [{
				name: 'id',
				type: 'int'
			}, {
				name: 'name',
				type: 'string'
			}]
		});
		
		var model_tab = new Ext.TabPanel({
			id: model_id,
			//		region: 'south',
			//		split: true,
			//		height: 220,
			title: ' ', //model_id,
			autoScroll: true,
			activeTab: 0,
			closable: true,
			defaults: {
				//			autoScroll: true,
				store: model_store[model_id]
			},
			items: [{
				xtype: 'dataview',
				title: 'Details',
				loadingText: "Loading...",
				tpl: new Ext.XTemplate('<tpl for=".">', '<div>{name}<br />{manufacturer}', '<tpl if="images[0]" for="images[0]">', '<div class="model_image"><img src="{public_filename_thumb}"></div>', '</tpl>', '</tpl>', '</tpl>')
			}, {
				xtype: 'dataview',
				title: 'Images',
				itemSelector: 'div.model_image',
				tpl: new Ext.XTemplate('<tpl for=".">', '<tpl for="images">', '<div class="model_image"><img src="{public_filename_thumb}"></div>', '</tpl>', '</tpl>')
			}, {
				xtype: 'dataview',
				title: 'Properties',
				itemSelector: 'div.model_property',
				tpl: new Ext.XTemplate('<tpl for=".">', '<tpl for="properties">', '<div class="model_property">{key}: {value}</div>', '</tpl>', '</tpl>')
			}, {
				xtype: 'dataview',
				title: 'Accessories',
				itemSelector: 'div.model_accessory',
				tpl: new Ext.XTemplate('<tpl for=".">', '<tpl for="accessories">', '<div class="model_accessory">{name}</div>', '</tpl>', '</tpl>')
			}, {
				xtype: 'dataview',
				title: 'Inventory Pools',
				itemSelector: 'div.model_inventory_pool',
				tpl: new Ext.XTemplate('<tpl for=".">', '<tpl for="inventory_pools">', '<div class="model_inventory_pool">{name}: ({items_size})</div>', '</tpl>', '</tpl>')
			}, {
				xtype: 'grid',
				listeners: {
/*					activate: function(){ // TODO optimize, avoid reload every time
						this.store.loadData(model_store[model_id].reader.jsonData['models'][0]);
					}, // this.render(); */
					rowclick: function(grid, rowIndex, e){
						model_id = grid.getStore().getAt(rowIndex).id;
						add_model_details(model_id);
					}
				},
				title: 'Compatibles',
				viewConfig: {
					forceFit: true
				},
				loadMask: true,
				autoscroll: true,
				store: model_store_compatibles[model_id],
				cm: new Ext.grid.ColumnModel([{
					header: "Name",
					dataIndex: 'name',
					width: 400
				}, {
					header: "Manufacturer",
					dataIndex: 'manufacturer',
					width: 200
				}])
			}, {
				xtype: 'form',
				title: 'Add',
				//			renderTo: document.body,
				//			viewConfig: { forceFit: true },
				//			hidden: true,
				listeners: {
					activate: function(){
						//model_store_ips[model_id].loadData(model_store[model_id].reader.jsonData['models'][0]);
						this.doLayout();
					}
				},
/// start form						
				labelAlign: 'top',
				buttonAlign: 'right',
				frame: true,
				//			width: 600,
				items: [{
					layout: 'column',
					items: [{
						columnWidth: .1,
						layout: 'form',
						items: {
							xtype: 'numberfield',
							fieldLabel: 'Quantity',
							name: 'quantity',
							value: '1',
							anchor: '70%'
						}
					}, {
						columnWidth: .3,
						layout: 'form',
						items: {
							xtype: 'combo',
							fieldLabel: 'Inventory Pool',
							name: 'inventory_pool',
							mode: 'local',
							triggerAction: 'all',
							store: model_store_ips[model_id],
							allowBlank: false,
							displayField: "name",
							valueField: "id",
							hiddenName: 'inventory_pool_id',
							editable: false,
							anchor: '90%'
						}
					}, {
						columnWidth: .3,
						layout: 'form',
						items: {
							xtype: 'datefield',
							fieldLabel: 'Start date',
							name: 'start_date',
							value: new Date(), //new Date(yy,mm,dd)
							format: "d.m.Y",
							//startDay: 1,
							//minDate: new Date(),
							disabledDays: [6, 0],
							anchor: '90%'
						}
					}, {
						columnWidth: .3,
						layout: 'form',
						items: {
							xtype: 'datefield',
							fieldLabel: 'End date',
							name: 'end_date',
							value: new Date(), //new Date(yy,mm,dd)
							format: "d.m.Y",
							//startDay: 1,
							//minDate: new Date(),
							disabledDays: [6, 0],
							anchor: '90%'
						}
					}]
				}],
				buttons: [{
					text: 'Add',
					type: 'submit',
					handler: function(){
						this.findParentByType('form').form.submit({
							waitMsg: 'Saving Data...',
							url: '/order/add_line',
							method: 'POST',
							params: {
								'model_id': model_store[model_id].data.items[0].id,
								'<%= request_forgery_protection_token %>': '<%= form_authenticity_token %>'
							},
							success: function(responseObject){
								Ext.getCmp('complete_order').getStore().load();
							},
							failure: function(responseObject){
								Ext.Msg.alert('Error', responseObject.responseText);
							}
						});
					}
				}]
			/// end form						
			}]
		});
		
		
		model_store[model_id].load({
//			params: {
//				model_id: model_id
//			}
		});

		model_details.add(model_tab);
	}	
	model_details.expand();
	model_details.activate(model_tab);
	model_details.doLayout();


} // end function