
// TODO render empty result when is actually empty: {"nil_classes": [], "results": 0}

    // create the Data Store
    var models_store = new Ext.data.Store({
        proxy: new Ext.data.HttpProxy(
			new Ext.data.Connection({
            	url: '/models/index',
				method: 'GET',
				extraParams: {format:'ext_json'}
			})
        ),

        // create reader that reads the Topic records
        reader: new Ext.data.JsonReader({
            root: 'models',
            totalProperty: 'results',
            id: 'id',
            fields: [
                'name', 'manufacturer'
            ]
        }),

        // turn on remote sorting
        remoteSort: true
    });
    models_store.setDefaultSort('name', 'ASC');
	
    // the column model has information about grid columns
    // dataIndex maps the column to the specific data field in
    // the data store
    var models_cm = new Ext.grid.ColumnModel([
		{
           header: "Name",
           dataIndex: 'name',
           width: 400
        },{
           header: "Manufacturer",
           dataIndex: 'manufacturer',
           width: 200
        }, {header: "",
			width: 50,
			fixed: true,
			dataIndex: '',
			align: 'center',
			//renderer: function(){ return '<input type="button" value="Add" style="font-size:80%; cursor: pointer;" />';}
			renderer: function(){ return '<img src="<%= $layout_public_path + "/images/icons/add.png" %>" style="cursor: pointer;" />';}
		}]);

    // by default columns are sortable
    models_cm.defaultSortable = true;

    var models_grid = new Ext.grid.GridPanel({
//        el:'model_list',
//        title:'[1] Models',
		height:350,
		split: true,
		region: 'north',
        store: models_store,
        cm: models_cm,
//		sm: sm,
		viewConfig: { forceFit: true },
        loadMask: true,
		listeners: {
			cellclick: function( grid, rowIndex, columnIndex, e ){
			  if (columnIndex == 2){
				x_id = grid.getStore().getAt(rowIndex).id;
				//var conn = new Ext.data.Connection();
				//conn.request({
				Ext.Ajax.request({
				    url: '/orders/add_line?model_id=' + x_id,
//				    method: 'POST',
//	TODO			    params: {"authenticity_token": encodeURIComponent('7839094fc4f002d4585df81e6486429aba7c9350')},
				    success: function(responseObject) {
						if(!eastPanel.items[0].expand()) complete_order_store.load();
				    },
					failure: function() {
						Ext.Msg.alert('Status', 'Failure');
					}
				});
			  }else{
				x_id = grid.getStore().getAt(rowIndex).id;
				models_details.load({
				    url: '/models/details?model_id=' + x_id,
				    text: "Loading...",
				    timeout: 30
				});
				//models_template.append('some-element', {name: 'myid', manufacturer: 'bar'});
			  }
			}
		},

        tbar: [
            'Search: ', ' ',
            new Ext.app.SearchField({
                store: models_store,
                width: 320
            })
        ],
		bbar: new Ext.PagingToolbar({
            pageSize: 25,
            store: models_store,
            displayInfo: true,
            displayMsg: 'Displaying topics {0} - {1} of {2}',
            emptyMsg: "No topics to display"
        })
    });


    // trigger the data store load
    models_store.load({params:{start:0, limit:25}});

///////////////////////////////////////////////////////////////////////////
	
	/*
	var models_template = new Ext.Template(
	    '<div>',
	        '<h3>{name}</h3>',
	        '{manufacturer}',
	    '</div>'
	);
	*/

       var models_details = new Ext.Panel({
			region: 'center',
		    autoScroll:true,
			bodyStyle: {
				background: '#ffffff',
				padding: '7px'
			}
			//, tpl: models_template
        });

///////////////////////////////////////////////////////////////////////////
	   //var already_visible = false;
       var models = new Ext.Panel({
            layout:'border',
			frame: true,
	        title:'[1] Models',
			width: 540,
			height:350,
            items:[models_grid, models_details]
			/* ,
			listeners: {
				activate: function(cmp) {
					if(already_visible){
						viewport.getComponent(1).setVisible(true);
						viewport.getComponent(2).setVisible(true);
						viewport.doLayout();
					}else{
						already_visible = true;
					}
					if(!eastPanel.items[1].expand()) complete_order_store.load();
				},
				deactivate: function(cmp) {
					viewport.getComponent(1).setVisible(false);
					viewport.getComponent(2).setVisible(false);
					viewport.doLayout();
				}
			} */
        });

  