	
    // the column model has information about grid columns
    // dataIndex maps the column to the specific data field in
    // the data store
    var basket_cm = new Ext.grid.ColumnModel([
		{
           header: "",
           dataIndex: 'quantity',
           width: 20,
           align: 'right',
 		   renderer:function(value,p,r){ return (r.data['available?'] == 'true')? value:'<div style="background-color: red;">'+ value +'</div>';},
		   editor: new Ext.form.TextField({
               allowBlank: false
           })
        },{
           header: '<%= _("Model") %>',
           dataIndex: 'model.name'
        },{
           header: '<%= _("Inventory Pool") %>',
           dataIndex: 'inventory_pool.name',
           hidden: true
        },{
			header: "",
			width: 20,
			dataIndex: '',
			renderer: function(){ return '<img src="<%= icon_path('bin_closed') %>" style="cursor: pointer;" />';}
		}]);

    var basket = new Ext.grid.EditorGridPanel({ //old: GridPanel
        title: '<%= _("Basket") %>',
        store: complete_order_store,
        cm: basket_cm,
		enableColumnHide: false,
		enableColumnMove: false,
		enableHdMenu: false,
		viewConfig: { forceFit: true },
		border: false,
        loadMask: true,
		clicksToEdit: 1,
		view: new Ext.grid.GroupingView({
            forceFit:true,
            groupTextTpl: '{text}'
        }),
		listeners: {
			expand: function(e){
				this.store.load();
			},
			afteredit: function(e){
				Ext.Ajax.request({
				    url: '/user/order/change_line_quantity',
 					method: 'POST',
				    params: {"order_line_id": e.record.id, "quantity": e.value,
					 '<%= request_forgery_protection_token %>': '<%= form_authenticity_token %>'},
				    success: function(responseObject) {
					    complete_order_store.load();
				    },
					failure: function() {
						Ext.Msg.alert('Status', 'Failure');
					}
				});
			},
			cellclick: function( grid, rowIndex, columnIndex, e ){
			  if (columnIndex == 3){
				x_id = grid.getStore().getAt(rowIndex).id;
				Ext.Ajax.request({
					method: 'DELETE',
				    url: '/user/order/remove_lines',
					params: {"lines": x_id,
							 '<%= request_forgery_protection_token %>': '<%= form_authenticity_token %>'},
                    success: function(r) {
					    complete_order_store.load();
                    }
				});
			  }
			}
		},
        bbar: new Ext.Toolbar({
			style: "background: silver none; border: 10px solid white;",			
			items: [
				new Ext.Action({
			        text: '<%= _("Continue with Order") %>',
					iconCls:'bt',
		            icon:'<%= icon_path('tab_go') %>',
			        handler: function(){
			            center_tabs.activate(order);
			        }
			    })
        	]
		})
    });

	// basket.render();
	
    // trigger the data store load
    complete_order_store.load();


  
