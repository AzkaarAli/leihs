
    // create the Data Store
    var basket_store = new Ext.data.Store({
        proxy: new Ext.data.HttpProxy(
			new Ext.data.Connection({
            	url: '/frontend/basket',
				method: 'GET',
				extraParams: {format:'ext_json'}
			})
        ),

        // create reader that reads the Topic records
        reader: new Ext.data.JsonReader({
            root: 'order_lines',
            totalProperty: 'results',
            id: 'id',
            fields: ['quantity', 'model.name']
        }),

        // turn on remote sorting
        remoteSort: true
    });
	
    // the column model has information about grid columns
    // dataIndex maps the column to the specific data field in
    // the data store
    var basket_cm = new Ext.grid.ColumnModel([{
           header: "",
           dataIndex: 'quantity',
           width: 25,
           align: 'right',
		   editor: new Ext.form.TextField({ // TODO fix rendering problem
               allowBlank: false
           })
        },{
           header: "Model",
           dataIndex: 'model.name',
           width: 170
        }]);

    // by default columns are sortable
    basket_cm.defaultSortable = true;

    var basket = new Ext.grid.EditorGridPanel({ //old: GridPanel
        el:'basket',
//        title:'Basket',
        store: basket_store,
        cm: basket_cm,
        loadMask: true,
		clicksToEdit: 1,
		listeners: {
			afteredit: function(e){
				Ext.Ajax.request({
				    url: '/frontend/change_line',
 				method: 'GET',
				    params: {"order_line_id": e.record.id, "quantity": e.value},
				    success: function(responseObject) {
					    basket_store.load();
				    },
					failure: function() {
						Ext.Msg.alert('Status', 'Failure');
					}
				});

			}
		},
        bbar: [
			new Ext.Action({
		        text: 'Complete Order',
		        handler: function(){
		            center_tabs.activate(complete_order);
		        }
		    })
        ]
    });

	basket.render();
	
    // trigger the data store load
    basket_store.load();


  