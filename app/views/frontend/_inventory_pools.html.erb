
	var current_inventory_pools = <%= @current_inventory_pools.collect(&:id).to_json %>;

    // create the Data Store
    var inventory_pools_store = new Ext.data.Store({
        proxy: new Ext.data.HttpProxy(
			new Ext.data.Connection({
            	url: '/frontend/get_inventory_pools.ext_json',
				method: 'GET'
			})
        ),

        // create reader that reads the Topic records
        reader: new Ext.data.JsonReader({
            root: 'inventory_pools',
            totalProperty: 'results',
            id: 'id',
            fields: [
                {name: 'name'}
            ]
        }),

        // turn on remote sorting
        remoteSort: true
    });
    inventory_pools_store.setDefaultSort('name', 'ASC');

	var inventory_pools_sm = new Ext.grid.CheckboxSelectionModel({
									listeners: {
										rowselect: function(cmp, rowIndex, r){
											if(!current_inventory_pools.include(r.id)) current_inventory_pools.push(r.id);
										},
										rowdeselect: function(cmp, rowIndex, r){
											current_inventory_pools.remove(r.id);
										},
										selectionchange: function(cmp){
										    inventory_pools.setTitle('<%= _("Inventory Pools") %> ('+ current_inventory_pools.length +'/'+ inventory_pools_store.data.length +')')
											// TODO 2203** automatic refresh
											// refresh_models();
										}
									}
								});
		
    // the column model has information about grid columns
    // dataIndex maps the column to the specific data field in
    // the data store
    var inventory_pools_cm = new Ext.grid.ColumnModel([
		inventory_pools_sm,
		{
           header: "Name",
           dataIndex: 'name'
		}
		]);


    // by default columns are sortable
    inventory_pools_cm.defaultSortable = true;

    var inventory_pools = new Ext.grid.GridPanel({
        title:'<%= _("Inventory Pools") %>',
		border: false,
		split: true,
        store: inventory_pools_store,
        cm: inventory_pools_cm,
		sm: inventory_pools_sm,
		viewConfig: { forceFit: true },
        loadMask: true,
		/* 2203** old
		listeners: {
			expand: function(e){
				inventory_pools_store.load();
			}
		},
		*/
		// TODO 2203** automatic refresh
        tbar: ['->',
			new Ext.Action({
		        text: '<%= _("Refresh") %>',
				iconCls:'bt',
	            icon:'<%= $layout_public_path + "/images/icons/arrow_refresh.png" %>',
		        handler: function(){
					refresh_models();
				}
		    })
        ]
    });

	
	// trigger the data store load
    inventory_pools_store.load();
	
// OPTIMIZE 2203**
	inventory_pools_store.on('load', function(store, records, options) {
	    var recs = [];
	    store.each(function(rec){
	        if(current_inventory_pools.include(rec.id)){
	            recs.push(rec);
	        }
	    });
	    inventory_pools_sm.selectRecords(recs);		
	});
//	
	
	function refresh_models(){
		/* 2203** old
		var selected = inventory_pools_sm.getSelections();
		var lines = "";

		for(var i = 0; i < selected.length; i++){
			if(lines != "") lines += ","; 
			lines += selected[i].id;
		}
		*/
		
        Ext.Ajax.request({
			method: 'GET',
		    url: '/frontend/set_inventory_pools',
			params: {"inventory_pool_ids[]": current_inventory_pools},
            success: function(r) {
				models_store.load(); //({params:{start:0, limit:25}});
	            models_grid.show();
				// TODO refresh the Frontend completely ??
            }
        });					
    }