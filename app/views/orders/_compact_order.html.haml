:ruby
  order = current_user.get_current_order
  grouped_order_lines = current_user.get_current_grouped_order_lines

%section#compactOrder.active{:"data-is_valid" => (!grouped_order_lines.blank? and order.approvable?)}
  %h3
    = _("Order")
  = link_to _("Edit"), order_path, :class => "topright", :title => _("Edit Order")
  .clear
  
  %section.entries
    - grouped_order_lines.each_pair do |inventory_pool, lines|
      %section.pool
        %h4
          = link_to inventory_pool, inventory_pool, :title => _("View %s") % inventory_pool
        %ul
          = render :partial => "orders/compact_order_line", :collection => lines
    
    - if grouped_order_lines.blank?
      %p
        = _("Currently you have no items in your order.")
          
  = form_tag submit_order_path do
    .purpose
      %hr
      %h3
        = _("Purpose")
      = text_area_tag "purpose", _("Please specify your order purpose here...")
    = button_tag _("Submit"), :class => "button green"

:javascript
  
  $(document).ready(function () {
    CompactOrder.setup();
  });
  
  var CompactOrder = new CompactOrder();
  
  function CompactOrder () {

    this.purposeMin = 0;
    this.submitButtonEnabled = true;
    this.purpose;
    
    this.setup = function () {
      CompactOrder.setupOrderLines();
      CompactOrder.setupPurpose();
      CompactOrder.validate();
      CompactOrder.setupSubmitButton();
      CompactOrder.setupStartTextFallBack();
      CompactOrder.setupPurposeValidation();
    }
    
    this.setupSubmitButton = function(){
    
      $("#compactOrder form button:submit").bind("click", function() {
      
        $("html, body").css("cursor", "wait").css("z-index", "1019");
        $("html, body").height($(window).height()).width($(window).width());
        
        $("#compactOrder form").submit();
      });
    }
    
    this.setupOrderLines = function() {
      CompactOrder.setupDeleteButtons();
    }
    
    this.setupDeleteButtons = function() {
      
      $("#compactOrder .item .delete a").live("ajax:before", function(){
        $(this).hide();
        $(this).data("deleting", true);
        $(this).parent().append('<img src="/assets/loading.gif" class="loading" />');
        $(this).parents(".item").find(".name").css("text-decoration", "line-through");
        
      }).live("ajax:success", function(){
        var _this = $(this).closest(".item");
        var to_remove = (_this.siblings("li").length) ? _this : _this.closest(".pool");
        
        to_remove.fadeOut(400, function(){
          $(this).remove();
        });
        
        CompactOrder.validate();
        
      }).live("ajax:error", function(){
        $(this).parents(".item").find(".name").css("text-decoration", "none");
        $(this).data("deleting", false);
        $(this).parent().find("img").remove();
        $(this).show();
        
        Dialog.add({
            trigger: $(this),
            content: '<p>#{_("Something went wrong!")}</p><p>#{_("You should redo your action or reload the page!")}</p>',
            title: '#{_("ERROR")}',
            buttons: { "Ok": function() {$(this).dialog("close");} }
        });
        
      }).live("mouseenter", function(){
        if(!$(this).data("deleting")) {
          $(this).parents(".item").find(".name").css("text-decoration", "line-through");
        }
        
      }).live("mouseleave", function(){
        if(!$(this).data("deleting")) {
          $(this).parents(".item").find(".name").css("text-decoration", "none");
        }
      });
    }
    
    this.disableSubmitButton = function() {
      $("#compactOrder .button").attr("disabled", true);
      $("#compactOrder .button").fadeTo(0,0.5);
    }
    
    this.enableSubmitButton = function() {
      $("#compactOrder .button").removeAttr("disabled");
      $("#compactOrder .button").fadeTo(400,1);
    }
    
    this.validate = function() {
      _validation = true;
      
      $("#compactOrder").data("is_valid") ? "" : _validation = false;
      
      CompactOrder.validatePurpose() ? "" : _validation = false;
      
      if(_validation) {
        CompactOrder.enableSubmitButton();
        sessionStorage.order_purpose = CompactOrder.purpose.val();
      } else {
        CompactOrder.disableSubmitButton();
      }
    }
    
    this.setupPurpose = function() {
      this.purpose = $("#compactOrder #purpose");
      this.purpose.data("start_text", CompactOrder.purpose.text());
      this.purpose.data("start_height", CompactOrder.purpose.height());
      this.purpose.autoResize({animateDuration : 200, extraSpace : 20, limit: 100, animateCallback: Aside.checkScaling});
      
      if (sessionStorage.order_purpose)
        this.purpose.val(sessionStorage.order_purpose);
    }
    
    this.validatePurpose = function() {
      _validation = CompactOrder.validatePurposeLength();
      
      return _validation;
    }
    
    this.validatePurposeLength = function() {
      _validation = ( CompactOrder.purpose.val().length > CompactOrder.purposeMin && CompactOrder.purpose.val() != CompactOrder.purpose.data("start_text") ) ? true : false;
      
      return _validation;
    }
    
    this.setupStartTextFallBack = function() {
      
      CompactOrder.purpose.bind('focus', function(){
        if($(this).val() == $(this).data("start_text")) {
          $(this).val("");
        }
      });  
      
      CompactOrder.purpose.bind('blur', function(){
        
        // save start text and height in data
        
        if(!$(this).val()) {
          $(this).val($(this).data("start_text"));
          $(this).animate({
            height: $(this).data("start_height")
          });
        }
      });  
    }
    
    this.setupPurposeValidation = function () {
      
      CompactOrder.purpose.bind('keyup', function(){
          CompactOrder.validate();
      });
    }
  }